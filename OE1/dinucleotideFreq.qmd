---
title: "Nucleotide frequency"
author: "Mathias"
format:
  html:
    theme: united
    code-fold: true
    code-link: true
    number-sections: true
    highlight-style: github
---

![](https://img.itch.zone/aW1nLzE3MTEyNjE5LmdpZg==/original/2%2BYVZg.gif){style="float:right;" fig-alt="Illustration of a detective cat. Artwork by @shigemi.itch.io." width="301"}

```{css}
#| echo: false

p {
  text-align: justify
}

```

```{r}
#| label: charged global variables
#| echo: false
#| warning: false

## VARIABLES QUE DEBEN SER ARGUMENTOS ##
# Especificar el directorio donde están los archivos
directory <- "/home/usuario/Data_Rstudio/chop_genome"  # Cambia esto a la ruta de tu directorio
# leer tabla de datos ()
data_init <- read.delim("/home/usuario/Proyectos/maestria/datos_ejecucion_genomas2.tsv.csv", sep = "\t", header = FALSE)
########################################

# Obtener la lista de archivos que comienzan con 'out_' y terminan con '.fasta'
fasta_files <- list.files(path = directory, pattern = "^out_:.*\\.fasta$", full.names = TRUE)
genome_name <- basename(data_init$V1)

genes_work <- basename(fasta_files)
prot_name <- sub(".*_:(.*):_.*", "\\1", fasta_files)
key_names <- sub("_.*", "\\1", prot_name)
key_name <- unique(sort(key_names))

all_prot_code <- list.files(path = "/home/usuario/BASH/chack_gff/prueba_frecuencia_nucleotidos", pattern = "^out_.*\\.fasta$", full.names = TRUE)


```


## Análisis de la Frecuencia de Dinucleótidos y Trinucleótidos Mediante PCA

Se llevó a cabo un análisis de la `frecuencia de dinucleótidos` y trinucleótidos en una serie de secuencias de ADN con el objetivo de identificar patrones que permitan diferenciar las secuencias de interés. Para ello, se empleó un [Análisis de Componentes Principales (PCA)](https://github.com/JoaquinAmatRodrigo/Estadistica-con-R/blob/master/PDF_format/35_Principal_Component_Analysis.pdf), un análisis estadística ampliamente utilizado para la `reducción de la dimensionalidad` en datos de alta complejidad.

El `PCA` se aplicó a los datos de `frecuencia` de `dinucleótidos` y `trinucleótidos`, lo que permitió `proyectar las secuencias` en un espacio de `menor dimensión`, facilitando la visualización y comprensión de las relaciones entre ellas. Las componentes principales seleccionadas explican un porcentaje significativo de la variabilidad observada en las frecuencias, lo que sugiere que estas combinaciones de bases son representativas de las diferencias biológicas presentes en las secuencias.

```{r}
#| label: load packages to nucleotide frequency
#| echo: true
#| warning: false

# Load necessary libraries
#library(data.table)
library(seqinr)
library(ggplot2)
library(ggfortify)
library(Rtsne)
library(tidyverse)

```

Creamos una funcion que está diseñado para calcular las frecuencias de dinucleótidos y trinucleótidos en secuencias de ADN contenidas en archivos FASTA. En este se usara para calcular las frecuencias de dinucleótidos y trinucleótidos de todas las proteinas codificantes de los genomas `r genome_name` y de las secuencias codificantes de `r key_name` en estos genomas.

```{r}
#| label: created nucleotide frequency function
#| echo: true
#| warning: false

# Function to count dinucleotides
count_dinucleotides <- function(sequence) {
  # Count dinucleotides
  counts <- seqinr::count(sequence, 2)
  # Calculate frequencies
  freqs <- counts / sum(counts)
  freqs <- round(freqs, 3)
  return(freqs)
}

# Function to count dinucleotides
count_trinucleotides <- function(sequence) {
  # Count dinucleotides
  counts <- seqinr::count(sequence, 3)
  # Calculate frequencies
  freqs <- counts / sum(counts)
  freqs <- round(freqs, 3)
  return(freqs)
}

nucleotide_frequncy <- function(fasta_files, type_frequency = "dinucleotide") {
  results <- data.frame()  # Initialize the empty data frame for the results

  # Iterate over each FASTA file in the folder
  for (fasta_file in fasta_files) {
    sequences <- read.fasta(fasta_file)
    ids <- names(sequences)
    
    # Base name of file
    base_name <- basename(fasta_file)
    # Regular expresion for extract diferents parts
    extracted_names <- sub(".*_([^_]+)\\.fasta$", "\\1", base_name)
    
    # Get dinucleotide or trinucleotide frequencies for each sequence within a file
    for (i in seq_along(sequences)) {
      seq <- getSequence(sequences[[i]])

      if (type_frequency == "trinucleotide") {
        freqs <- count_trinucleotides(seq)
      } else if (type_frequency == "dinucleotide") {
        freqs <- count_dinucleotides(seq)
      }
      
      # Create a row with file name, ID and frequencies
      row <- c(File = extracted_names, ID = ids[i], freqs)
      # row <- data.frame(File = extracted_names, ID = ids[i], t(freqs), stringsAsFactors = FALSE)

      results <- results %>% bind_rows(row)
    }
  }

  return(results)
}

```

Se llama a la función nucleotide_frequncy() para obtener las tablas de frecuencias de dinucleótidos y trinucleótidos.

```{r}
#| label: execution nucleotide frequency function
#| echo: true
#| warning: false

# Run the function and get the dinucleotide frequency table
dinucleotide_table <- nucleotide_frequncy(fasta_files, type_frequency = "dinucleotide")

# dinucleotide_table_all_prot_code <- nucleotide_frequncy(all_prot_code, type_frequency = "dinucleotide")

trinucleotide_table <- nucleotide_frequncy(fasta_files, type_frequency = "trinucleotide")

# trinucleotide_table_all_prot_code <- nucleotide_frequncy(all_prot_code, type_frequency = "trinucleotide")

```

Además, desarrollamos una función para eliminar símbolos que podrían interferir con la ejecución del código, a la cual denominamos

```{r}
#| label: ID string manipulation
#| echo: true
#| warning: false

# function to string manipulation on sequence ID
transform_columns <- function(df, cols) {
  # Iterate over the specified columns
  for (col in cols) {
    # Replace '=' with '_'
    df[[col]] <- gsub("=", "_", df[[col]])              
    # Remove everything after ':' or ';'
    df[[col]] <- gsub("[:;].*", "", df[[col]])          
  }
  return(df)  # Return the modified data frame
}

dinucleotide_table <- transform_columns(dinucleotide_table, "ID")

# dinucleotide_table_all_prot_code <- transform_columns(dinucleotide_table_all_prot_code, "ID")

# trinucleotide_table_all_prot_code <- transform_columns(trinucleotide_table_all_prot_code, "ID")

trinucleotide_table <- transform_columns(trinucleotide_table, "ID")

```


```{r}
#| label: write and read big data
#| echo: false
#| warning: false

# chack to save extract data on all protein coding

# path_di_protein_code_safe_tsv <- file.path("output_directory", paste0("dinuclotide_frequency_all_protein_coding.tsv"))
# path_di_protein_code_safe <- file.path("output_directory", "dinuclotide_frequency_all_protein_coding.csv")
# write.csv(dinucleotide_table_all_prot_code, file = path_di_protein_code_safe, row.names = FALSE, quote = FALSE)
# write.table(dinucleotide_table_all_prot_code, file = path_di_protein_code_safe_tsv, row.names = FALSE, col.names = TRUE, sep = "\t", quote = FALSE)

# path_tri_protein_code_safe_tsv <- file.path("output_directory", paste0("trinuclotide_frequency_all_protein_coding.tsv"))
# path_tri_protein_code_safe <- file.path("output_directory", paste0("trinuclotide_frequency_all_protein_coding.csv"))
# write.csv(trinucleotide_table_all_prot_code, file = path_tri_protein_code_safe, row.names = FALSE, col.names = TRUE, quote = FALSE)
# write.table(trinucleotide_table_all_prot_code, file = path_tri_protein_code_safe_tsv, row.names = FALSE, col.names = TRUE, sep = "\t", quote = FALSE)

# Load the table generated by the second script

# dinucleotide_all_protein_coding <- read.table("output_directory/dinuclotide_frequency_all_protein_coding.tsv", sep = "\t", header = TRUE)
dinucleotide_all_protein_coding <- read.table("output_directory/dinuclotide_frequency_all_protein_coding.tsv", sep = "\t", header = TRUE)

trinucleotide_all_protein_coding <- read.table("output_directory/trinuclotide_frequency_all_protein_coding.tsv", sep = "\t", header = TRUE)

```

```{r}
#| label: plot data table
#| echo: true
#| warning: false


library(reactable)

reactable(dinucleotide_table[,c(1, 3:18)], highlight = TRUE)

```

En esta parte, el código crean nuevos data frame llamados `combained_dinucleotide` y `combained_trinucleotide`. Estos combinan las frecuencias de dinucleótidos y trinucleótidos complementarios en el ADN. Al unir las frecuencias de estos pares complementarios, se pueden observar patrones adicionales en las frecuencias previamente calculadas para las secuencias codificantes, lo cual es útil para detectar posibles sesgos en la composición del ADN.

```{r}
#| label: eliminates complementary reverse nucleotide sets
#| echo: true
#| warning: false

# Convert dinucleotide columns to numeric
cols_to_convert <- c("aa", "tt", "ac", "gt", "ag", "ct", "ca", "tg", "cc", "gg", "ga", "tc", "at", "cg", "gc", "ta")
dinucleotide_all_protein_coding[cols_to_convert] <- lapply(dinucleotide_all_protein_coding[cols_to_convert], as.numeric)

# Convert trinucleotide columns to numeric
cols_to_convert_trinucleotides <- c("aaa", "aag", "aat", "aca", "acc", "act", "aga", "agg", "agt", "ata", "atc", "att", "caa", "cag", "cat", "cca", "ccc", "cct", "cga", "cgg", "cgt", "cta", "ctc", "ctt", "gaa", "gag", "gat", "gca", "gcc", "gct", "gga", "ggc", "ggt", "gta", "gtc", "gtt", "taa", "tag", "tat", "tca", "tcc", "tct", "tga", "tgg", "tgt", "tta", "ttc", "ttt")
trinucleotide_all_protein_coding[cols_to_convert_trinucleotides] <- lapply(trinucleotide_all_protein_coding[cols_to_convert_trinucleotides], as.numeric)


combine_data_frequencies <- function(data, genome_col = "File", id_col = "ID", type) {
  if (type == "di") {
    result_combained_data <- data.frame(
      "Genome" = data[, genome_col],
      "id" = data[, id_col],
      "aa.tt" = data[,"aa"] + data[,"tt"],
      "ac.gt" = data[,"ac"] + data[,"gt"],
      "ag.ct" = data[,"ag"] + data[,"ct"],
      "ca.tg" = data[,"ca"] + data[,"tg"],
      "cc.gg" = data[,"cc"] + data[,"gg"],
      "ga.tc" = data[,"ga"] + data[,"tc"],
      "at" = data[,"at"],
      "cg" = data[,"cg"],
      "gc" = data[,"gc"],
      "ta" = data[,"ta"]
    )
  } else if (type == "tri") {
    result_combained_data <- data.frame(
      "Genome" = data[, genome_col],
      "id" = data[, id_col],
      "aaa.aag" = data[,"aaa"] + data[,"aag"],
      "aac.aat" = data[,"aac"] + data[,"aat"],
      "acc.act" = data[,"acc"] + data[,"act"],
      "aga.agg" = data[,"aga"] + data[,"agg"],
      "ata.atc" = data[,"ata"] + data[,"atc"],
      "caa.cag" = data[,"caa"] + data[,"cag"],
      "cat.cac" = data[,"cat"] + data[,"cac"],
      "cca.ccc" = data[,"cca"] + data[,"ccc"],
      "cga.cgg" = data[,"cga"] + data[,"cgg"],
      "cta.ctc" = data[,"cta"] + data[,"ctc"],
      "gaa.gag" = data[,"gaa"] + data[,"gag"],
      "gat.gca" = data[,"gat"] + data[,"gca"],
      "gga.ggg" = data[,"gga"] + data[,"ggg"],
      "gta.gtc" = data[,"gta"] + data[,"gtc"],
      "taa.tag" = data[,"taa"] + data[,"tag"],
      "tat.tca" = data[,"tat"] + data[,"tca"],
      "tga.tgg" = data[,"tga"] + data[,"tgg"],
      "tta.ttc" = data[,"tta"] + data[,"ttc"]
    )
  } else {
    stop("Invalid type specified. Use 'di' for dinucleotides or 'tri' for trinucleotides.")
  }

  return(result_combained_data)
}

combained_dinucleotide <- combine_data_frequencies(dinucleotide_all_protein_coding, type = "di")
combained_trinucleotide <- combine_data_frequencies(trinucleotide_all_protein_coding, type = "tri")

```


::: {.panel-tabset .nav-pills}

## Dinucleotide PCA

Se realizó un análisis de componentes principales (PCA) sobre las frecuencias de dinucleótidos combinados en las secuencias codificantes de los genomas ``r genome_name``. El PCA permite reducir la dimensionalidad de las frecuencias de dinucleótidos en estas secuencias, facilitando la exploración de las relaciones entre secuencias y sus patrones de composición a nivel de `dinucleótidos`. 

En este análisis, se utiliza la función `autoplot()` para visualizar los resultados del PCA. El total de las secuencias codificantes se colorean según los `genomas`, y se muestran los vectores de carga (loadings) para identificar qué dinucleótidos tienen mayor influencia en cada componente principal.

```{r}
#| label: principal component analysis dinucleotide
#| echo: true
#| warning: false

# Function to perform PCA and graph (require ggplot2 and ggfortify)
perform_pca <- function(data, file_col = "File", id_col = "ID") {
  # Exclude 'File' and 'ID' columns from numerical analysis
  pca_data <- data[, !(names(data) %in% c(file_col, id_col))]
  # Convert all columns to numeric format
  pca_data <- as.data.frame(lapply(pca_data, as.numeric))
  # Perform the PCA
  pca_result <- prcomp(pca_data, scale. = TRUE)
  # Get PCA scores
  pca_scores <- as.data.frame(pca_result$x)
  # Add 'File' and 'ID' columns to PCA results
  pca_scores <- cbind(data[, c(file_col, id_col)], pca_scores)
  # Plot the PCA with autoplot
  pca_plot <- autoplot(pca_result, data = data, colour = file_col, 
                       loadings = TRUE, loadings.label = TRUE, loadings.colour = 'grey64', 
                       alpha = 0.2, size = 3) +
    theme_minimal()
  
  # Return the results of the PCA and the graph
  return(list(pca_result = pca_result, pca_scores = pca_scores, pca_plot = pca_plot))
}

# Call perform_pca
perform_result_dinucleotide_pca <- perform_pca(combained_dinucleotide, file_col = "Genome", id_col = "id")

# show plot
perform_result_dinucleotide_pca$pca_plot

```

## Trinucleotide PCA

Ademas, se realizó un análisis de componentes principales (PCA) sobre las frecuencias de trinucleótidos combinados en las secuencias codificantes de los genomas ``r genome_name``.

```{r}
#| label: principal component analysis trinucleotide
#| echo: true
#| warning: false

# Call perform_pca
perform_result_trinucleotide_pca <- perform_pca(combained_trinucleotide, file_col = "Genome", id_col = "id")

# show plot
perform_result_trinucleotide_pca$pca_plot

```

:::

---

## plot PCA marcando ``r key_name``

::: {.panel-tabset .nav-pills}

## Dinucleotido PCA highlighted

En la siguiente figura se muestra el mismo análisis PCA, pero esta vez solo se han resaltado las secuencias de interés correspondientes a ``r key_name`` para cada uno de los `genomas`. Las secuencias restantes se presentan en color gris.

```{r}

highlight_ids <- dinucleotide_table$ID

create_pca_plot <- function(data, highlight_ids, pca_result, genome_col = "Genome") {
  # Create a copy of the input data
  data_all_genomes <- data

  # Create new 'highlight' column that combines 'Highlighted' with the genome column
  data_all_genomes$highlight <- ifelse(
    data_all_genomes$id %in% highlight_ids, 
    paste0("Highlighted_", data_all_genomes[[genome_col]]), 
    "Other"
  )

  # Assign transparency values according to the 'highlight' column
  data_all_genomes$alpha <- ifelse(
    grepl("Highlighted", data_all_genomes$highlight), 0.6, 0.1
  )
  
  # Assign the first two principal components of the PCA
  data_all_genomes$PC1 <- pca_result$x[, 1]
  data_all_genomes$PC2 <- pca_result$x[, 2]

    # Get the unique values of the 'highlight' column and sort them
  unique_highlight_values <- sort(unique(data_all_genomes$highlight))
  
  # Create a color palette that assigns gray to 'Other' and different colors to 'Highlighted_<Genome>'
  color_palette <- c(scales::hue_pal()(length(unique_highlight_values) - 1), "grey")
  
  # Map color palette to unique highlight values
  names(color_palette) <- unique_highlight_values
  
  # Create subsets of the data for 'Highlighted' and 'Other'
  highlighted_points <- subset(data_all_genomes, grepl("Highlighted", highlight))
  other_points <- subset(data_all_genomes, highlight == "Other")

    # Plot with ggplot: first 'Other' and then 'Highlighted'
  ggplot() +
    # Layer for non-highlighted points in gray and low transparency
    geom_point(data = other_points, aes(x = PC1, y = PC2), color = "grey", alpha = 0.1, size = 3) +
    # Layer for highlighted points with colors and greater transparency
    geom_point(data = highlighted_points, aes(x = PC1, y = PC2, color = highlight, alpha = alpha), size = 3) +
    scale_color_manual(values = color_palette) +
    scale_alpha_continuous(range = c(0.1, 0.6)) + 
    labs(title = "PCA Highlighting Selected IDs", x = "Principal Component 1", y = "Principal Component 2") +
    theme_minimal()
}

create_pca_plot(combained_dinucleotide, dinucleotide_table$ID, perform_result_dinucleotide_pca$pca_result)


```

## Trinucleotido PCA highlighted

```{r}

```

:::

---


```{r}
#| label: plot PCA only gene
#| echo: true
#| warning: false

# Create a vector of unique genomes from the dataset
genomes <- unique(sort(combained_dinucleotide$Genome))

# Initialize an empty list to store PCA plots for each genome
pca_plots <- list()

# Loop through each genome
for (genome in genomes) {
  # Subset the data for the current genome
  genome_data <- subset(combained_dinucleotide, Genome == genome)
  
  # Perform PCA on the subsetted data
  pca_result <- perform_pca(genome_data, file_col = "Genome", id_col = "id")
  pca_scores <- pca_result$pca_scores
  
  # Create a 'highlight' column for visualization
  pca_scores$highlight <- ifelse(pca_scores$id %in% highlight_ids, 
                                 paste0("Highlighted_", pca_scores$Genome), "Other")
  
  # Assign alpha values based on the highlight status
  pca_scores$alpha <- ifelse(grepl("Highlighted", pca_scores$highlight), 0.6, 0.1)
  
  # Add PCA scores to the dataframe
  pca_scores$PC1 <- pca_result$pca_result$x[, 1]
  pca_scores$PC2 <- pca_result$pca_result$x[, 2]
  
  # Create subsets for highlighted and other points
  highlighted_points <- subset(pca_scores, grepl("Highlighted", highlight))
  other_points <- subset(pca_scores, highlight == "Other")
  
  # Create the PCA plot for the current genome
  pca_plot <- ggplot() +
    # Layer for non-highlighted points (Other) in gray with low transparency
    geom_point(data = other_points, aes(x = PC1, y = PC2), color = "grey", alpha = 0.1, size = 3) +
    # Layer for highlighted points with specific colors and higher transparency
    geom_point(data = highlighted_points, aes(x = PC1, y = PC2, color = highlight, alpha = alpha), size = 3) +
    scale_color_manual(values = color_palette) +  # Apply the color palette
    scale_alpha_continuous(range = c(0.1, 0.6)) +  # Map alpha values
    labs(title = paste("PCA for", genome), x = "Principal Component 1", y = "Principal Component 2") +
    theme_minimal()
  
  # Store the plot in the list
  pca_plots[[genome]] <- pca_plot
}

# Optionally, you can print or save each plot
for (genome in genomes) {
  print(pca_plots[[genome]])  # Print the plot for each genome
  # ggsave(paste0("PCA_", genome, ".pdf"), plot = pca_plots[[genome]])  # Save as PDF if needed
}


```