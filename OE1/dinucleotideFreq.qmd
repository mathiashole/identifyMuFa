---
title: "Nucleotide frequency"
author: "Mathias"
format:
  html:
    theme: united
    code-fold: true
    code-link: true
    number-sections: true
    highlight-style: github
---

![](https://img.itch.zone/aW1nLzE3MTEyNjE5LmdpZg==/original/2%2BYVZg.gif){style="float:right;" fig-alt="Illustration of a detective cat. Artwork by @shigemi.itch.io." width="301"}

```{css}
#| echo: false

p {
  text-align: justify
}

```

```{r}
#| label: charged global variables
#| echo: false
#| warning: false

## VARIABLES QUE DEBEN SER ARGUMENTOS ##
# Especificar el directorio donde están los archivos
directory <- "/home/usuario/Data_Rstudio/chop_genome"  # Cambia esto a la ruta de tu directorio
# leer tabla de datos ()
data_init <- read.delim("/home/usuario/Proyectos/maestria/datos_ejecucion_genomas2.tsv.csv", sep = "\t", header = FALSE)
########################################

# Obtener la lista de archivos que comienzan con 'out_' y terminan con '.fasta'
fasta_files <- list.files(path = directory, pattern = "^out_.*\\.fasta$", full.names = TRUE)
genome_name <- basename(data_init$V1)

genes_work <- basename(fasta_files)
prot_name <- sub(".*_:(.*):_.*", "\\1", fasta_files)
key_names <- sub("_.*", "\\1", prot_name)
key_name <- unique(sort(key_names))

all_prot_code <- list.files(path = "/home/usuario/BASH/chack_gff/prueba_frecuencia_nucleotidos", pattern = "^out_.*\\.fasta$", full.names = TRUE)


```


## Análisis de la Frecuencia de Dinucleótidos y Trinucleótidos Mediante PCA

Se llevó a cabo un análisis de la frecuencia de dinucleótidos y trinucleótidos en una serie de secuencias de ADN con el objetivo de identificar patrones que permitan diferenciar las secuencias de interés. Para ello, se empleó un Análisis de Componentes Principales (PCA), una técnica estadística ampliamente utilizada para la reducción de la dimensionalidad en datos de alta complejidad.

El PCA se aplicó a los datos de frecuencia de dinucleótidos y trinucleótidos, lo que permitió proyectar las secuencias en un espacio de menor dimensión, facilitando la visualización y comprensión de las relaciones entre ellas. Las componentes principales seleccionadas explican un porcentaje significativo de la variabilidad observada en las frecuencias, lo que sugiere que estas combinaciones de bases son representativas de las diferencias biológicas presentes en las secuencias.

```{r}
#| label: load packages to nucleotide frequency
#| echo: true
#| warning: false

# Load necessary libraries
#library(data.table)
library(seqinr)
library(ggplot2)
library(ggfortify)
library(Rtsne)
library(tidyverse)

```

Creamos una funcion que está diseñado para calcular las frecuencias de dinucleótidos y trinucleótidos en secuencias de ADN contenidas en archivos FASTA. En este se usara para calcular las frecuencias de dinucleótidos y trinucleótidos de todas las proteinas codificantes de los genomas `r genome_name` y de las secuencias codificantes de `r key_name` en estos genomas.

```{r}
#| label: created nucleotide frequency function
#| echo: true
#| warning: false

# Function to count dinucleotides
count_dinucleotides <- function(sequence) {
  # Count dinucleotides
  counts <- seqinr::count(sequence, 2)
  # Calculate frequencies
  freqs <- counts / sum(counts)
  freqs <- round(freqs, 3)
  return(freqs)
}

# Function to count dinucleotides
count_trinucleotides <- function(sequence) {
  # Count dinucleotides
  counts <- seqinr::count(sequence, 3)
  # Calculate frequencies
  freqs <- counts / sum(counts)
  freqs <- round(freqs, 3)
  return(freqs)
}

nucleotide_frequncy <- function(fasta_files, type_frequency = "dinucleotide") {
  results <- data.frame()  # Initialize the empty data frame for the results

  # Iterate over each FASTA file in the folder
  for (fasta_file in fasta_files) {
    sequences <- read.fasta(fasta_file)
    ids <- names(sequences)
    
    # Base name of file
    base_name <- basename(fasta_file)
    # Regular expresion for extract diferents parts
    extracted_names <- sub(".*_([^_]+)\\.fasta$", "\\1", base_name)
    
    # Get dinucleotide or trinucleotide frequencies for each sequence within a file
    for (i in seq_along(sequences)) {
      seq <- getSequence(sequences[[i]])

      if (type_frequency == "trinucleotide") {
        freqs <- count_trinucleotides(seq)
      } else if (type_frequency == "dinucleotide") {
        freqs <- count_dinucleotides(seq)
      }
      
      # Create a row with file name, ID and frequencies
      row <- c(File = extracted_names, ID = ids[i], freqs)
      # row <- data.frame(File = extracted_names, ID = ids[i], t(freqs), stringsAsFactors = FALSE)

      results <- results %>% bind_rows(row)
    }
  }

  return(results)
}

```

Se llama a la función nucleotide_frequncy() para obtener las tablas de frecuencias de dinucleótidos y trinucleótidos.

```{r}
#| label: execution nucleotide frequency function
#| echo: true
#| warning: false

# Run the function and get the dinucleotide frequency table
dinucleotide_table <- nucleotide_frequncy(fasta_files, type_frequency = "dinucleotide")

# dinucleotide_table_all_prot_code <- nucleotide_frequncy(all_prot_code, type_frequency = "dinucleotide")

trinucleotide_table <- nucleotide_frequncy(fasta_files, type_frequency = "trinucleotide")

# trinucleotide_table_all_prot_code <- nucleotide_frequncy(all_prot_code, type_frequency = "trinucleotide")

```

```{r}
#| label: ID string manipulation
#| echo: true
#| warning: false

# function to string manipulation on sequence ID
transform_columns <- function(df, cols) {
  # Iterate over the specified columns
  for (col in cols) {
    # Replace '=' with '_'
    df[[col]] <- gsub("=", "_", df[[col]])              
    # Remove everything after ':' or ';'
    df[[col]] <- gsub("[:;].*", "", df[[col]])          
  }
  return(df)  # Return the modified data frame
}

dinucleotide_table <- transform_columns(dinucleotide_table, "ID")

# dinucleotide_table_all_prot_code <- transform_columns(dinucleotide_table_all_prot_code, "ID")

# trinucleotide_table_all_prot_code <- transform_columns(trinucleotide_table_all_prot_code, "ID")

trinucleotide_table <- transform_columns(trinucleotide_table, "ID")

```

```{r}
#| label: write and read big data
#| echo: false
#| warning: false

# chack to save extract data on all protein coding

# path_di_protein_code_safe_tsv <- file.path("output_directory", paste0("dinuclotide_frequency_all_protein_coding.tsv"))
# path_di_protein_code_safe <- file.path("output_directory", "dinuclotide_frequency_all_protein_coding.csv")
# write.csv(dinucleotide_table_all_prot_code, file = path_di_protein_code_safe, row.names = FALSE, quote = FALSE)
# write.table(dinucleotide_table_all_prot_code, file = path_di_protein_code_safe_tsv, row.names = FALSE, col.names = TRUE, sep = "\t", quote = FALSE)

# path_tri_protein_code_safe_tsv <- file.path("output_directory", paste0("trinuclotide_frequency_all_protein_coding.tsv"))
# path_tri_protein_code_safe <- file.path("output_directory", paste0("trinuclotide_frequency_all_protein_coding.csv"))
# write.csv(trinucleotide_table_all_prot_code, file = path_tri_protein_code_safe, row.names = FALSE, col.names = TRUE, quote = FALSE)
# write.table(trinucleotide_table_all_prot_code, file = path_tri_protein_code_safe_tsv, row.names = FALSE, col.names = TRUE, sep = "\t", quote = FALSE)

# Load the table generated by the second script

# dinucleotide_all_protein_coding <- read.table("output_directory/dinuclotide_frequency_all_protein_coding.tsv", sep = "\t", header = TRUE)
dinucleotide_all_protein_coding <- read.table("output_directory/dinuclotide_frequency_all_protein_coding.tsv", sep = "\t", header = TRUE)

trinucleotide_all_protein_coding <- read.table("output_directory/trinuclotide_frequency_all_protein_coding.tsv", sep = "\t", header = TRUE)

```

```{r}
#| label: plot data table
#| echo: true
#| warning: false


library(reactable)

reactable(dinucleotide_table[,c(1, 3:18)], highlight = TRUE)

```

En esta parte, el código crea un nuevo data frame llamado `combained_dinucleotide`, que combina las frecuencias de dinucleótidos que son complementarios en el ADN. Al combinar las frecuencias de estos inversos complementarios permite observar otros patrones de los dinucleótidos en las secuencias codificantes, siendo útil para detectar sesgos en la composición del ADN.

```{r}
#| label: eliminates complementary reverse nucleotide sets
#| echo: true
#| warning: false

# Convert dinucleotide columns to numeric
cols_to_convert <- c("aa", "tt", "ac", "gt", "ag", "ct", "ca", "tg", "cc", "gg", "ga", "tc", "at", "cg", "gc", "ta")
dinucleotide_all_protein_coding[cols_to_convert] <- lapply(dinucleotide_all_protein_coding[cols_to_convert], as.numeric)

combine_dinucleotide_frequencies <- function(data, genome_col = "File", id_col = "ID") {
# Now apply the operations to combine frequencies
  result_combained_dinucleotide <- data.frame(
    "Genome" = data[,"File"],
    "id" = data[,"ID"],
    "aa.tt" = data[,"aa"] + data[,"tt"],
    "ac.gt" = data[,"ac"] + data[,"gt"],
    "ag.ct" = data[,"ag"] + data[,"ct"],
    "ca.tg" = data[,"ca"] + data[,"tg"],
    "cc.gg" = data[,"cc"] + data[,"gg"],
    "ga.tc" = data[,"ga"] + data[,"tc"],
    "at" = data[,"at"],
    "cg" = data[,"cg"],
    "gc" = data[,"gc"],
    "ta" = data[,"ta"]
  )
  return(result_combained_dinucleotide)
}

combained_dinucleotide <- combine_dinucleotide_frequencies(dinucleotide_all_protein_coding)

```


Se realizó un análisis de componentes principales (PCA) sobre las frecuencias de dinucleótidos combinados en las secuencias codificantes de los genomas ``r genome_name``. El PCA permite reducir la dimensionalidad de las frecuencias de dinucleótidos en estas secuencias, facilitando la exploración de las relaciones entre secuencias y sus patrones de composición a nivel de `dinucleótidos`. 

En este análisis, se utiliza la función `autoplot()` para visualizar los resultados del PCA. El total de las secuencias codificantes se colorean según los `genomas`, y se muestran los vectores de carga (loadings) para identificar qué dinucleótidos tienen mayor influencia en cada componente principal.

```{r}
#| label: principal component analysis
#| echo: true
#| warning: false

# Function to perform PCA and graph (require ggplot2 and ggfortify)
perform_pca <- function(data, file_col = "File", id_col = "ID") {
  # Exclude 'File' and 'ID' columns from numerical analysis
  pca_data <- data[, !(names(data) %in% c(file_col, id_col))]
  # Convert all columns to numeric format
  pca_data <- as.data.frame(lapply(pca_data, as.numeric))
  # Perform the PCA
  pca_result <- prcomp(pca_data, scale. = TRUE)
  # Get PCA scores
  pca_scores <- as.data.frame(pca_result$x)
  # Add 'File' and 'ID' columns to PCA results
  pca_scores <- cbind(data[, c(file_col, id_col)], pca_scores)
  # Plot the PCA with autoplot
  pca_plot <- autoplot(pca_result, data = data, colour = file_col, 
                       loadings = TRUE, loadings.label = TRUE, loadings.colour = 'grey64', 
                       alpha = 0.2, size = 3) +
    theme_minimal()
  
  # Return the results of the PCA and the graph
  return(list(pca_result = pca_result, pca_scores = pca_scores, pca_plot = pca_plot))
}

# Call perform_pca
perform_result_pca <- perform_pca(combained_dinucleotide, file_col = "Genome", id_col = "id")

# show plot
perform_result_pca$pca_plot


```

En la siguiente figura se muestra el mismo análisis PCA, pero esta vez solo se han resaltado las secuencias de interés correspondientes a ``r key_name`` para cada uno de los `genomas`. Las secuencias restantes se presentan en color gris.

```{r}

highlight_ids <- dinucleotide_table$ID

# Create new 'highlight' column that combines 'Highlighted' with 'File' column
combained_dinucleotide_all_genomes <- combained_dinucleotide

combained_dinucleotide_all_genomes$highlight <- ifelse(
  combained_dinucleotide_all_genomes$id %in% highlight_ids, 
  paste0("Highlighted_", combained_dinucleotide_all_genomes$Genome), 
  "Other"
)

# Assign transparency values ​​according to the 'highlight' column
combained_dinucleotide_all_genomes$alpha <- ifelse(
  grepl("Highlighted", combained_dinucleotide_all_genomes$highlight), 0.2, 0.1
)
pca_result <- perform_result_pca$pca_result
# Assign the first two principal components of the PCA
combained_dinucleotide_all_genomes$PC1 <- pca_result$x[, 1]
combained_dinucleotide_all_genomes$PC2 <- pca_result$x[, 2]

# Get the unique values ​​of the 'highlight' column and sort
unique_highlight_values <- sort(unique(combained_dinucleotide_all_genomes$highlight))

# Create a color palette that assigns a gray color to 'Other' and different colors to each 'Highlighted_<File>'
color_palette <- c(scales::hue_pal()(length(unique_highlight_values) - 1), "grey")

# Color mapping: we assign 'grey' to 'Other' and a different color to each 'Highlighted_<File>'
names(color_palette) <- unique_highlight_values

# Plot with ggplot, differentiating each 'Highlighted_<File>'
ggplot(combained_dinucleotide_all_genomes, aes(x = PC1, y = PC2, color = highlight, alpha = alpha)) +
  geom_point(size = 3) +
  scale_color_manual(values = color_palette) +  # Apply the generated colors
  labs(title = "PCA Highlighting Selected IDs", x = "Principal Component 1", y = "Principal Component 2") +
  theme_minimal() +
  guides(alpha = "none")

autoplot(pca_result, data = combained_dinucleotide_all_genomes, colour = 'highlight', alpha = 'alpha', loadings = TRUE, loadings.label = TRUE) +
  scale_color_manual(values = color_palette) +  # Apply the generated colors
  labs(title = "PCA Highlighting Selected IDs with autoplot") +
  theme_minimal()


```

```{r}
#| label: plot PCA
#| echo: true
#| warning: false

# highlight_ids <- dinucleotide_table$ID

# dinucleotide_all_protein_coding$highlight <- ifelse(dinucleotide_all_protein_coding$ID %in% highlight_ids, "Highlighted", "Other")
# dinucleotide_all_protein_coding$alpha <- ifelse(dinucleotide_all_protein_coding$highlight == "Highlighted", 0.8, 0.1)
# dinucleotide_all_protein_coding$PC1 <- pca_result$x[, 1]
# dinucleotide_all_protein_coding$PC2 <- pca_result$x[, 2]

# ggplot(dinucleotide_all_protein_coding, aes(x = PC1, y = PC2, color = highlight, alpha = alpha)) +
#   geom_point(size = 3) +
#   scale_color_manual(values = c("Other" = "grey", "Highlighted" = "red")) +
#   labs(title = "PCA Highlighting Selected IDs", x = "Principal Component 1", y = "Principal Component 2") +
#   theme_minimal() +
#   guides(alpha = "none") 


# autoplot(pca_result, data = dinucleotide_all_protein_coding, colour = 'highlight', alpha = 'alpha', loadings = TRUE, loadings.label = TRUE) +
#   scale_color_manual(values = c("Other" = "grey", "Highlighted" = "red")) +
#   labs(title = "PCA Highlighting Selected IDs") +
#   theme_minimal()

```


```{r}
#| label: plot PCA only gene
#| echo: true
#| warning: false

# dinucleotide_table[cols_to_convert] <- lapply(dinucleotide_table[cols_to_convert], as.numeric)

# combained_dinucleotide_gene <- combine_dinucleotide_frequencies(dinucleotide_table)

# # Call perform_pca
# perform_result_pca <- perform_pca(combained_dinucleotide_gene, file_col = "Genome", id_col = "id")

# # show plot
# perform_result_pca$pca_plot

df_list <- split(combained_dinucleotide, combained_dinucleotide$Genome)

pca_results_list <- lapply(df_list, function(sub_df) {
  perform_pca(sub_df, file_col = "Genome", id_col = "id")
})

# lapply(pca_results_list, function(result) {
#   # print(result$pca_plot)
#   autoplot(result$pca_result, data = combained_dinucleotide, colour = 'highlight', alpha = 'alpha', loadings = TRUE, loadings.label = TRUE) +
#   scale_color_manual(values = color_palette) +  # Apply the generated colors
#   labs(title = "PCA Highlighting Selected IDs with autoplot") +
#   theme_minimal()
# })

```