---
title: "Nucleotide frequency"
author: "Mathias"
format:
  html:
    theme: united
    code-fold: true
    code-link: true
    number-sections: true
    highlight-style: github
---

## Frecuencia de dinucleótidos

![](https://img.itch.zone/aW1nLzE3MTEyNjE5LmdpZg==/original/2%2BYVZg.gif){style="float:right;" fig-alt="Illustration of a detective cat. Artwork by @shigemi.itch.io." width="301"}

```{css}
#| echo: false

p {
  text-align: justify
}

```

```{r}
#| label: show-genome
#| echo: false
#| warning: false

## VARIABLES QUE DEBEN SER ARGUMENTOS ##
# Especificar el directorio donde están los archivos
directory <- "/home/usuario/Data_Rstudio/chop_genome"  # Cambia esto a la ruta de tu directorio
# leer tabla de datos ()
data_init <- read.delim("/home/usuario/Proyectos/maestria/datos_ejecucion_genomas2.tsv.csv", sep = "\t", header = FALSE)
########################################

# Obtener la lista de archivos que comienzan con 'out_' y terminan con '.fasta'
fasta_files <- list.files(path = directory, pattern = "^out_.*\\.fasta$", full.names = TRUE)
genome_name <- basename(data_init$V1)

genes_work <- basename(fasta_files)
prot_name <- sub(".*_:(.*):_.*", "\\1", fasta_files)
key_names <- sub("_.*", "\\1", prot_name)
key_name <- unique(sort(key_names))

all_prot_code <- fasta_files <- list.files(path = "/home/usuario/BASH/chack_gff/prueba_frecuencia_nucleotidos", pattern = "^out_.*\\.fasta$", full.names = TRUE)


```


## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}

# Load necessary libraries
#library(data.table)
library(seqinr)
library(ggplot2)
library(ggfortify)
library(Rtsne)
library(tidyverse)

```

You can add options to executable code like this

```{r}

# Function to count dinucleotides
count_dinucleotides <- function(sequence) {
  # Count dinucleotides
  counts <- seqinr::count(sequence, 2)
  # Calculate frequencies
  freqs <- counts / sum(counts)
  freqs <- round(freqs, 3)
  return(freqs)
}

# Function to count dinucleotides
count_trinucleotides <- function(sequence) {
  # Count dinucleotides
  counts <- seqinr::count(sequence, 3)
  # Calculate frequencies
  freqs <- counts / sum(counts)
  freqs <- round(freqs, 3)
  return(freqs)
}

nucleotide_frequncy <- function(fasta_files, type_frequency = "dinucleotide") {
  results <- data.frame()  # Initialize the empty data frame for the results

  # Iterate over each FASTA file in the folder
  for (fasta_file in fasta_files) {
    sequences <- read.fasta(fasta_file)
    ids <- names(sequences)
    
    # Base name of file
    base_name <- basename(fasta_file)
    # Regular expresion for extract diferents parts
    extracted_names <- sub(".*_([^_]+)\\.fasta$", "\\1", base_name)
    # if(type_seq == "genome"){
    #   extracted_names <- sub(".*_([^_]+)\\_Genome.fasta$", "\\1", base_name)
    # } else if(type_seq == "gene") {
    #   extracted_names <- sub(".*_([^_]+)\\.fasta$", "\\1", base_name)
    #   #extracted_names <- str_remove_all(extracted_names, "^.*_")  
    # }
    
    # Get dinucleotide or trinucleotide frequencies for each sequence within a file
    for (i in seq_along(sequences)) {
      seq <- getSequence(sequences[[i]])

      if (type_frequency == "trinucleotide") {
        freqs <- count_trinucleotides(seq)
      } else if (type_frequency == "dinucleotide") {
        freqs <- count_dinucleotides(seq)
      }
      
      # Create a row with file name, ID and frequencies
      row <- c(File = extracted_names, ID = ids[i], freqs)
      # row <- data.frame(File = extracted_names, ID = ids[i], t(freqs), stringsAsFactors = FALSE)

      
      # Convert the row to a data frame and add it to results
      # row_df <- as.data.frame(t(row), stringsAsFactors = FALSE)
      # results <- rbind(results, row_df)
      results <- results %>% bind_rows(row)
    }
  }

  return(results)
}

```

```{r}

# Run the function and get the dinucleotide frequency table
dinucleotide_table <- nucleotide_frequncy(fasta_files, type_frequency = "dinucleotide")

dinucleotide_table_all_prot_code <- nucleotide_frequncy(all_prot_code, type_frequency = "dinucleotide")

trinucleotide_table <- nucleotide_frequncy(fasta_files, type_frequency = "trinucleotide")

trinucleotide_table_all_prot_code <- nucleotide_frequncy(all_prot_code, type_frequency = "trinucleotide")

```

```{r}
# chack to save extract data on all protein coding

# path_di_protein_code_safe_tsv <- file.path("output_directory/", paste0("dinuclotide_frequency_all_protein_coding.tsv"))
# path_di_protein_code_safe <- file.path("output_directory/", paste0("dinuclotide_frequency_all_protein_coding.tsv"))
# write.csv(dinucleotide_table_all_prot_code, file = path_di_protein_code_safe, row.names = FALSE, col.names = TRUE, quote = FALSE)
# write.table(dinucleotide_table_all_prot_code, file = path_di_protein_code_safe_tsv, row.names = FALSE, col.names = TRUE, sep = "\t", quote = FALSE)

# path_tri_protein_code_safe_tsv <- file.path("output_directory/", paste0("trinuclotide_frequency_all_protein_coding.tsv"))
# path_tri_protein_code_safe <- file.path("output_directory/", paste0("trinuclotide_frequency_all_protein_coding.tsv"))
# write.csv(trinucleotide_table_all_prot_code, file = path_tri_protein_code_safe, row.names = FALSE, col.names = TRUE, quote = FALSE)
# write.table(trinucleotide_table_all_prot_code, file = path_tri_protein_code_safe_tsv, row.names = FALSE, col.names = TRUE, sep = "\t", quote = FALSE)

```

```{r}
library(reactable)

reactable(dinucleotide_table[,c(1, 3:18)], highlight = TRUE)

```

```{r}

# Convert dinucleotide columns to numeric
cols_to_convert <- c("aa", "tt", "ac", "gt", "ag", "ct", "ca", "tg", "cc", "gg", "ga", "tc", "at", "cg", "gc", "ta")
dinucleotide_table[cols_to_convert] <- lapply(dinucleotide_table[cols_to_convert], as.numeric)

# Now apply the operations to combine frequencies
combained_dinucleotide <- data.frame(
  "Genome" = dinucleotide_table[,"file"],
  "id" = dinucleotide_table[,"ID"],
  "aa.tt" = dinucleotide_table[,"aa"] + dinucleotide_table[,"tt"],
  "ac.gt" = dinucleotide_table[,"ac"] + dinucleotide_table[,"gt"],
  "ag.ct" = dinucleotide_table[,"ag"] + dinucleotide_table[,"ct"],
  "ca.tg" = dinucleotide_table[,"ca"] + dinucleotide_table[,"tg"],
  "cc.gg" = dinucleotide_table[,"cc"] + dinucleotide_table[,"gg"],
  "ga.tc" = dinucleotide_table[,"ga"] + dinucleotide_table[,"tc"],
  "at" = dinucleotide_table[,"at"],
  "cg" = dinucleotide_table[,"cg"],
  "gc" = dinucleotide_table[,"gc"],
  "ta" = dinucleotide_table[,"ta"]
)

```

```{r}

dinucleotide_data <- combained_dinucleotide[, -c(1, 2)]  # Exclude the first columns (File and ID)
dinucleotide_data <- as.data.frame(lapply(dinucleotide_data, as.numeric))  # Convert to numeric

# Perform PCA
pca_result <- prcomp(dinucleotide_data, scale. = TRUE)

# Obtain the PCA scores (principal components for each observation)
pca_scores <- as.data.frame(pca_result$x)

# Add the File and ID columns to the PCA results
pca_scores <- cbind(dinucleotide_table[, c("file", "ID")], pca_scores)

# Show the first PCA results
# print(head(pca_scores))
autoplot(pca_result, data = dinucleotide_table, colour = 'file', loadings = TRUE,
         loadings.label = TRUE, loadings.colour = 'grey64', alpha = 0.4, size = 3) +
# labs(title = "PCA of Dinucleotide Frequencies", 
#      x = "Principal Component 1", 
#      y = "Principal Component 2") +
# theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold")) +
theme_minimal()

```

```{r}

set.seed(123)
data <- combained_dinucleotide[,-2]
data$Genome <- factor(data$Genome)

# Split into train and test
train_index <- sample(seq_len(nrow(data)), size = 0.7 * nrow(data))
train_data <- data[train_index, ]
test_data <- data[-train_index, ]

pca <- prcomp(train_data[, -1], scale. = TRUE)
train_pca <- predict(pca, train_data[, -1])
test_pca <- predict(pca, test_data[, -1])

# Add target variable
train_pca <- data.frame(train_pca, target = train_data$Genome)
test_pca <- data.frame(test_pca, target = test_data$Genome)

```

```{r}

# Different supervised models
# need more comments
library(e1071)
svm_model <- svm(target ~ ., data = train_pca, kernel = "linear")
svm_predictions <- predict(svm_model, test_pca)
svm_confusion <- table(Predicted = svm_predictions, Actual = test_pca$target)
svm_accuracy <- sum(diag(svm_confusion)) / sum(svm_confusion)

library(randomForest)
rf_model <- randomForest(target ~ ., data = train_pca, ntree = 100)
rf_predictions <- predict(rf_model, test_pca)
rf_confusion <- table(Predicted = rf_predictions, Actual = test_pca$target)
rf_accuracy <- sum(diag(rf_confusion)) / sum(rf_confusion)

log_model <- glm(target ~ ., data = train_pca, family = binomial)
log_predictions <- predict(log_model, test_pca, type = "response")
log_pred_class <- ifelse(log_predictions > 0.5, levels(test_pca$target)[2], levels(test_pca$target)[1])
log_confusion <- table(Predicted = log_pred_class, Actual = test_pca$target)
log_accuracy <- sum(diag(log_confusion)) / sum(log_confusion)

library(class)
knn_predictions <- knn(train_pca[, -ncol(train_pca)], test_pca[, -ncol(test_pca)], train_pca$target, k = 5)
knn_confusion <- table(Predicted = knn_predictions, Actual = test_pca$target)
knn_accuracy <- sum(diag(knn_confusion)) / sum(knn_confusion)

library(rpart)
tree_model <- rpart(target ~ ., data = train_pca, method = "class")
tree_predictions <- predict(tree_model, test_pca, type = "class")
tree_confusion <- table(Predicted = tree_predictions, Actual = test_pca$target)
tree_accuracy <- sum(diag(tree_confusion)) / sum(tree_confusion)

```


```{r}

## missing confusion matrix, roc curve, recall and Fscore ##

# Evaluate the different supervised models
results <- data.frame(
  Model = c("SVM", "Random Forest", "Logistic Regression", "KNN", "Decision Tree"),
  Accuracy = c(svm_accuracy, rf_accuracy, log_accuracy, knn_accuracy, tree_accuracy)
)

# Show results table
reactable(results, highlight = TRUE)
#print(results

ggplot(results, aes(x = Model, y = Accuracy, fill = Model)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  labs(title = "Comparación de Exactitud de los Modelos", y = "Exactitud", x = "Modelo")

classification_results <- data.frame(
  Actual = test_pca$target,
  SVM = svm_predictions,
  Random_Forest = rf_predictions,
  Logistic_Regression = log_pred_class,
  KNN = knn_predictions,
  Decision_Tree = tree_predictions
)

# Show results table
reactable(classification_results, highlight = TRUE)
#head(classification_results)



```
