---
title: "Análisis de Secuencias"
author: "Mathias"
format:
  html:
    theme: united
    code-fold: true
    code-link: true
    number-sections: true
    highlight-style: github
---

```{css}
#| echo: false

p {
  text-align: justify
}

```

```{r}
#| label: show-genome
#| echo: false
#| warning: false

# directory <- "/home/usuario/Data_Rstudio/chop_genome"  # Cambia esto a la ruta de tu directorio
directory <- "output_directory/"
# leer tabla de datos ()
# data_init <- read.delim("/home/usuario/Proyectos/maestria/datos_ejecucion_genomas2.tsv.csv", sep = "\t", header = FALSE)
## NEED OUTPUT DIR
data_transformed <- read.delim("output_directory/data_transformed.tsv", sep = "\t", header = TRUE)
########################################

# Obtener la lista de archivos que comienzan con 'out_' y terminan con '.fasta'
# fasta_files <- list.files(path = directory, pattern = "^out_.*\\.fasta$", full.names = TRUE)
fasta_files <- paste0(directory, data_transformed$out_gscissors)
genome_name <- basename(data_transformed$fasta_file)
rest_code_prot <- paste0(directory, data_transformed$out_rest_gscissors)

genes_work <- basename(fasta_files)
prot_name <- sub(".*_:(.*):_.*", "\\1", fasta_files)
key_names <- sub("_.*", "\\1", prot_name)
key_name <- unique(sort(key_names))


```

## Descripcion

![](https://img.itch.zone/aW1nLzE3MTEyNjE5LmdpZg==/original/2%2BYVZg.gif){style="float:right;" fig-alt="Illustration of a detective cat. Artwork by @https://shigemi.itch.io." width="301"}

Los datos utilizados en este análisis fueron obtenidas a partir de diferentes genomas de *Trypanosoma cruzi*, disponibles en [**tritrydb**](https://tritrypdb.org/tritrypdb/app) y [**NCBI**](https://www.ncbi.nlm.nih.gov/).

A partir de estos genomas, se extrajeron secuencias de los genes ``r key_name``, con el objetivo de realizar análisis de contenido de `GC`, `longitud de las secuencias`, y otros aspectos relevantes para la caracterización de los genes de ``r key_name``.

### Genomas

Este análisis utiliza los siguientes genomas ``r genome_name``. A partir de los cuales se obtienen las secuencias para su estudio.

### Librerias y datos a usar

Se cargan las `bibliotecas` necesarias para el análisis de datos genómicos, así como para la manipulación, transformación y visualización de dataframes, junto con la generación de gráficos en formato de arreglo. A continuación, se crea una lista de archivos que contiene los `genomas` a analizar, y se inicializa una `tabla` destinada a almacenar los resultados del análisis de los archivos FASTA.

```{r}
#| label: load-packages
#| echo: true
#| warning: false

# Cargar las librerías necesarias
library(seqinr)
library(tidyverse)
library(gridExtra)
library(reactable)

```

---

## Procesamiento de los genomas

Para procesar las secuencias FASTA, se crea una función que genera un dataframe vacío donde se almacenarán los elementos obtenidos a partir de una secuencia dada. Luego, se elimina la ruta del archivo para extraer el nombre del mismo. A continuación, se obtiene el identificador de cada una de las secuencias dentro del archivo FASTA, se calcula la longitud de la secuencia utilizando una función de la biblioteca SEQINR y, con otra función de la misma biblioteca, se calcula el porcentaje de bases GC. Finalmente, se agrega una fila de encabezado y se devuelve el resultado de la función.

```{r}
#| label: created function
#| echo: false
#| warning: false

calculate_fasta_feature <- function(fasta_files, type){
  
  all_results <- data.frame(file = character(), ID = character(), Length = numeric(), GC_Content = numeric(), stringsAsFactors = FALSE)

  # Leer cada archivo FASTA y calcular las métricas
  for (fasta_file in fasta_files) {
    # Leer el archivo FASTA
    fasta_content <- read.fasta(fasta_file)
    
    # Nombre base del archivo
    base_name <- basename(fasta_file)
    # Expresión regular para extraer las partes necesarias
    if(type == "genome"){
      extracted_names <- sub(".*_([^_]+)\\_Genome.fasta$", "\\1", base_name)
    } else if(type == "gene") {
      extracted_names <- sub(".*_([^_]+)\\.fasta$", "\\1", base_name)
      #extracted_names <- str_remove_all(extracted_names, "^.*_")  
    }

    
    # Procesar cada secuencia en el archivo FASTA
    for (sequence in fasta_content) {
      id <- attr(sequence, "name")
      length <- round(getLength(sequence), 0)
      gc_content <- round(GC(sequence), 3)
      
      # Añadir los resultados a la tabla
      all_results <- all_results %>%
        add_row(file = extracted_names, ID = id, Length = length, GC_Content = gc_content)
    }
  }
  
  return(all_results)

}

```

### Características de los genomas

Se utiliza la función recién creada para extraer diversas características de los genomas, fundamentales para analizar su composición genética. Con estos datos, generamos la primera `Tabla resumen`, que agrupa los contigs de cada genoma ``r genome_name``, mostrando el  `número total de secuencias encontradas`, así como la `longitud` mínima, media y máxima, así como el contenido de `GC` mínimo, medio y máximo.

```{r}
#| label: extract genome feature and created summary
#| echo: true
#| warning: false

# Llamamos a la funcion para obtener GC y largo de cada contig, de cada genoma
# genomes <- calculate_fasta_feature(data_init$V1, "genome")

# path_genome_safe_tsv <- file.path("output_directory/", paste0("genome_gc_length.tsv"))
# path_genome_safe <- file.path("output_directory/", paste0("genome_gc_length.csv"))
# write.csv(genomes, file = path_genome_safe, row.names = FALSE, col.names = TRUE, quote = FALSE)
# write.table(genomes, file = path_genome_safe_tsv, row.names = FALSE, col.names = TRUE, sep = "\t", quote = FALSE)

# Load the table generated by the second script
genomes <- read.table("output_directory/genome_gc_length.tsv", sep = "\t", header = TRUE)


# Crear una tabla con el conteo de secuencias por archivo
genomes_summary <- genomes %>%
  group_by(file) %>%
  summarise(Total_Sequences = n(),
            min_length = min(Length),
            mean_length = round(mean(Length), 0),
            max_length = max(Length),
            min_gc = min(GC_Content),
            mean_gc = round(mean(GC_Content), 3),
            max_gc = max(GC_Content))

```

### Tabla resumen de los genomas

```{r}
#| label: summary genome feature and created summary
#| echo: false
#| warning: false


# Mostrar la tabla de conteo de secuencias
reactable(genomes_summary, highlight = TRUE)

```

### Visualización de la Longitud y Contenido de GC de los Genomas

En esta sección, se generarán gráficos que representan el `contenido de GC` y la `longitud` de cada genoma. Además, se implementarán funciones específicas para cada gráfico, lo que permitirá reutilizar el código de manera eficiente en otras partes del análisis. Para crear estas funciones se implementara las bibliotecas `ggridges`, `ggbeeswarm` y `cowplot`.

::: {.panel-tabset .nav-pills}

## GC

Esta funcion de R, `plot_violin_gc`, generar un gráfico de violín que muestra la distribución del contenido de GC en distintos genomas ``r genome_name``.

```{r}
#| label: plotting-genome-gc
#| fig-cap: "Secuencias por genoma y contenido GC."
#| echo: true
#| warning: false
#| layout: [[100]]

library(ggridges)
library(ggbeeswarm)
library(cowplot)

genomes$Length <- as.numeric((format(genomes$Length, scientific = TRUE))) # Changed format

# Inspired by http://tom-e-white.com/datavision/05-genome-size.html domain of https://github.com/tomwhite
# GC plotting function
plot_violin_gc <- function(data, plot_title, y_label) {
  ggplot(data, aes(x = file, y = GC_Content, fill = file)) +
    geom_violin(alpha = 0.7, width = 0.5) + 
    geom_boxplot(width = 0.1, fill = "white", alpha = 0.3) +
    scale_fill_brewer(palette = "Dark2") +  # Apply RColorBrewer's Dark2 Palette
    ylab(y_label) +  # Customize the ylab
    labs(
      title = plot_title,  # Customize the title
      caption = "Data source: Facultad de Ciencias, Udelar"
    ) +
    theme_minimal_vgrid() + 
    theme(axis.line.y = element_blank(), axis.ticks.y = element_blank())
}

# Function plot_violin_gc call
plot_violin_gc(
  data = genomes, 
  plot_title = "Genome GC", 
  y_label = "GC Content"
)

```

## Length

Por otro lado, llamamos la función de R `plot_violin_length` crea un gráfico de violín que ilustra la distribución de las longitudes genómicas de los diferentes genomas ``r genome_name``.

```{r}
#| label: plotting-genome-length
#| fig-cap: "Secuencias por genoma y contenido GC."
#| echo: true
#| warning: false
#| layout: [[100]]

# Function to plot the length of genomes
plot_violin_length <- function(data, type, plot_title, x_label) {
  set.seed(12345)
  p <- ggplot(data, aes(Length, reorder(file, -Length, FUN = median), color = file)) + # reorder(file, -Length, FUN=median)
    geom_quasirandom(groupOnX = FALSE, show.legend = FALSE, size = 1, dodge.width = 0.9, alpha = 0.4) +
    labs(
      title = plot_title,  # Title customization
      x = x_label,  # Custom x-axis label
      caption = "Data source: Facultad de Ciencias, Udelar"
    ) +
    theme_minimal_vgrid() + 
    theme(axis.title.y = element_blank(), axis.line.y = element_blank(), axis.ticks.y = element_blank()) +
    scale_color_brewer(palette = "Dark2")

    # Conditional to choose the type of scale on the x axis
    if (type == "genome") {
    p <- p + scale_x_log10(
      breaks = c(10^2, 10^3, 10^4, 10^5, 10^6, 10^7, 10^8, 10^9, 10^10),
      labels = scales::trans_format("log10", scales::math_format(10^.x))
    )
  }

  return(p)
}

# Function plot_violin_length call
plot_violin_length(
  data = genomes,
  "genome", 
  plot_title = "Genome size", 
  x_label = "Number of base pairs"
)

```

:::

---

## Procesamiento de las secuencias ``r key_name``

Se llama a la funcion ``calculate_fasta_feature`` para calcular por cada secuencia ``r genes_work`` el contenido de `GC` y la `longitud (pb)`  de ``r key_name``. Finalmente, creamos una `tabla resumen`, que agrupa las secuencias por cada genoma ``r genome_name``, mostrando el  ``r key_name``, así como la `longitud` mínima, media y máxima, así como el contenido de `GC` mínimo, medio y máximo.


```{r}
#| label: extract and summary data of key_name
#| echo: true
#| warning: false

all_results <- calculate_fasta_feature(fasta_files, "gene")

# Crear una tabla con el conteo de secuencias por archivo
file_sequence_counts <- all_results %>%
  group_by(file) %>%
  summarise(Total_Sequences = n(),
            min_length = min(Length),
            mean_length = round(mean(Length), 0),
            max_length = max(Length),
            min_gc = min(GC_Content),
            mean_gc = round(mean(GC_Content), 3),
            max_gc = max(GC_Content))

# Mostrar la tabla de conteo de secuencias
reactable(file_sequence_counts, highlight = TRUE)

```

### Visualización de la Longitud y Contenido de GC de ``r key_name``

Se generarán gráficos que representan el `contenido de GC` y la `longitud` de cada secuencia ``r genes_work`` de ``r key_name``. En esta seccion reutilizaremos parte del codigo escrito llamando a las funciones que crean los plot de `GC` y de `longitud` de las secuencias.

::: {.panel-tabset .nav-pills}

## GC

Llamamos a la funcion `plot_violin_gc`, dando lugar a un gráfico violín que muestra la distribución del contenido de GC en distintos genomas de las secuencias ``r key_name``.


```{r}
#| label: plotting-gc
#| fig-cap: "Secuencias por genoma y contenido GC."
#| echo: true
#| warning: false
#| layout: [[100]]

var_title_gc <- paste0(key_name," GC")

# Function plot_violin_gc call
plot_violin_gc(
  data = all_results, 
  plot_title = var_title_gc, 
  y_label = "GC Content"
)

```

## Length

Además, reutilizamos la función previamente empleada para graficar la distribución del genoma, pero esta vez generamos un gráfico que muestra la distribución de las longitudes de las distintas secuencias de ``r key_name``, correspondientes a cada genoma.

```{r}
#| label: plotting-length
#| fig-cap: "Secuencias por genoma y largo total de la secuencia."
#| echo: true
#| warning: false
#| layout: [[100]]

var_title <- paste0(key_name," size")

# Function plot_violin_length call
plot_violin_length(
  data = all_results,
  "gene", 
  plot_title = var_title, 
  x_label = "Number of base pairs"
)

palmer_colors <- c("black", "green", "blue")

```

:::

-----

## Filtrado de las secuencias de `r key_name` por el largo

Las secuencias de `r key_name` poseen un largo minimo de (debe ser variable) 8000 pb??, siendo el largo minimo de filtrado. Las secuencias menores a este minimo se descartaran dado que no contienen a `r key_name` en su totalidad.

```{r}
#| label: filter-seq
#| echo: true
#| warning: false

# length_min <- mean(all_results$Length)
# length_min <- median(file_sequence_counts$mean_length)
length_min <- 8000

filter_data_higher <- filter(all_results, Length >= length_min) 
filter_data_smaller <- filter(all_results, Length <= length_min)


```


### Resumen de Información de `r key_name` en cada genoma filtrado por el largo

Se crea una nueva tabla resumen a partir de las `r key_name` `que comprenden el largo minimo` agrupandos por genomas, calculando el `número total` de secuencias, la `longitud` mínima, media y máxima, así como el contenido de `GC` mínimo, medio y máximo.


```{r}
#| label: summary-info_higher
#| echo: false
#| warning: false

# Crear una tabla con el conteo de secuencias por archivo
file_sequence_counts <- filter_data_higher %>%
  group_by(file) %>%
  summarise(Total_Sequences = n(),
            min_length = min(Length),
            mean_length = round(mean(Length), 0),
            max_length = max(Length),
            min_gc = min(GC_Content),
            mean_gc = round(mean(GC_Content), 3),
            max_gc = max(GC_Content))

# Mostrar la tabla de conteo de secuencias
reactable(file_sequence_counts, highlight = TRUE)

```


### Visualización de la Longitud y Contenido de GC de ``r key_name`` filtradas por un largo minimo

Representan el `contenido de GC` y la `longitud` de cada secuencia de ``r key_name`` filtrada por un `largo minimo`. Se vuelve a  reutilizar parte las funciones, llamandolas para crear los plot de `GC` y de `longitud` de las secuencias.

::: {.panel-tabset .nav-pills}

## GC

Llamamos a la funcion `plot_violin_gc`, para representar la distribución del contenido de GC en distintos genomas de las secuencias ``r key_name`` filtradas por un largo minimo.

```{r}
#| label: plotting-GC-filter
#| fig-cap: "Secuencias por genoma y largo total de la secuencia."
#| echo: false
#| warning: false
#| layout: [[100]]

var_filter_gc <- paste0("Filter ", key_name, " GC")

# Function plot_violin_gc call
plot_violin_gc(
  data = filter_data_higher, 
  plot_title = var_filter_gc, 
  y_label = "GC Content"
)

# violin_plot(filter_data_higher, "file", "GC_Content", 4, 2, "Archivo", "Longitud")

```

## Length

Además, reutilizamos la función `plot_violin_length` para representar distribución de las secuencias ``r key_name`` filtradas.

```{r}
#| label: plotting-length-filter
#| fig-cap: "Secuencias por genoma y largo total de la secuencia."
#| echo: false
#| warning: false
#| layout: [[100]]

var_length_filter <- paste0( "Filter ",key_name," size")

# Function plot_violin_length call
plot_violin_length(
  data = filter_data_higher,
  "gene", 
  plot_title = var_length_filter, 
  x_label = "Number of base pairs"
)

```

:::

---

## Resumen de Información de secuencias menores al largo minimo establecido

Se crea una nueva tabla resumen a partir de las secuencias que se descartaran por no cumplir con el minimo establecido, se agrupa las secuencias por archivo, calculando el `número total` de secuencias, la `longitud` mínima, media y máxima, así como el contenido de `GC` mínimo, medio y máximo.

```{r}
#| label: summary-info-smaller
#| echo: false
#| warning: false

# Crear una tabla con el conteo de secuencias por archivo
file_sequence_counts <- filter_data_smaller %>%
  group_by(file) %>%
  summarise(Total_Sequences = n(),
            min_length = min(Length),
            mean_length = round(mean(Length), 0),
            max_length = max(Length),
            min_gc = min(GC_Content),
            mean_gc = round(mean(GC_Content), 3),
            max_gc = max(GC_Content))

# Mostrar la tabla de conteo de secuencias
reactable(file_sequence_counts, highlight = TRUE)

```
