## üß¨ Visualizaci√≥n interactiva

```{=html}
<style>
  /* Estilos para los botones toggle de representaciones */
  .rep-toggle-group {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5em;
  }
  .rep-toggle-button {
    padding: 0.4em 0.9em;
    background: #e9ecef;
    border-radius: 6px;
    border: 1px solid #ced4da;
    cursor: pointer;
    user-select: none;
    font-size: 0.9em;
    color: #495057;
    transition: background-color 0.2s, border-color 0.2s, color 0.2s;
  }
  .rep-toggle-button.active {
    background: #4dabf7;
    border-color: #339af0;
    color: white;
  }
</style>

<div class="viewer-controls">

  <!-- Select para modelos -->
  <div class="control-group">
    <label for="model-select">Modelo</label>
    <select id="model-select" class="styled-select">
      <option value="structure_file/fold_2025_05_13_12_36_178_44_dominio_c_terminal_model_0.cif">Modelo 0</option>
      <option value="structure_file/fold_2025_05_13_12_36_178_44_dominio_c_terminal_model_1.cif">Modelo 1</option>
      <option value="structure_file/fold_2025_05_13_12_36_178_44_dominio_c_terminal_model_2.cif">Modelo 2</option>
      <option value="structure_file/fold_2025_05_13_12_36_178_44_dominio_c_terminal_model_3.cif">Modelo 3</option>
      <option value="structure_file/fold_2025_05_13_12_36_178_44_dominio_c_terminal_model_4.cif" selected>Modelo 4</option>
    </select>
  </div>

  <!-- Select para color -->
  <div class="control-group">
    <label for="color-select">Color</label>
    <select id="color-select" class="styled-select">
      <option value="chainid" selected>Cadenas</option>
      <option value="element">Elemento</option>
      <option value="resname">Residuo</option>
      <option value="residueindex">√çndice</option>
      <option value="uniform">Uniforme</option>
      <option value="secondary">Estructura Secundaria (Helix/Sheet/Loop)</option>
      <option value="hydrophobicity">Hidrofobicidad</option>
      <option value="bfactor">B-factor (Flexibilidad)</option>
      <option value="spectrum">Espectro (Rainbow)</option>
      <option value="sstruc">Tipo de H√©lice (Œ±/Œ≤/œÄ)</option>
      <option value="modelindex">Por Modelo (NMR/Multi-model)</option>
      <option value="partialcharge">Carga Parcial</option>
    </select>
  </div>

  <!-- Botones toggle para visualizaci√≥n m√∫ltiple -->
  <div class="control-group" style="flex-direction: column; align-items: flex-start;">
    <label>Visualizaci√≥n (puedes seleccionar varias):</label>
    <div id="rep-toggle-group" class="rep-toggle-group">
      <div class="rep-toggle-button active" data-rep="cartoon">Cartoon</div>
      <div class="rep-toggle-button" data-rep="surface">Surface</div>
      <div class="rep-toggle-button" data-rep="ball+stick">Ball+Stick</div>
      <div class="rep-toggle-button" data-rep="spacefill">Spacefill</div>
      <div class="rep-toggle-button" data-rep="licorice">Licorice</div>
      <div class="rep-toggle-button" data-rep="trace">Trace</div>
      <div class="rep-toggle-button" data-rep="tube">Tube</div>
      <div class="rep-toggle-button" data-rep="backbone">Backbone</div>
      <div class="rep-toggle-button" data-rep="contact">Contact Points</div>
      <div class="rep-toggle-button" data-rep="helixorient">Helix Orientation</div>
      <div class="rep-toggle-button" data-rep="hyperball">Hyperball</div>
      <div class="rep-toggle-button" data-rep="line">Line</div>
      <div class="rep-toggle-button" data-rep="point">Points</div>
    </div>
  </div>
  
<!-- Selecci√≥n por rango de residuos -->
<div class="control-group">
  <label for="range-select">Seleccionar rango (ej. 10-40)</label>
  <input type="text" id="range-select" placeholder="10-40" class="styled-select">
</div>

<!-- Selecci√≥n por tipo de amino√°cido -->
<div class="control-group">
  <label for="residue-select">Seleccionar residuos (ej. CYS,ALA)</label>
  <input type="text" id="residue-select" placeholder="CYS,ALA" class="styled-select">
</div>

<!-- Estilo para selecci√≥n -->
<div class="control-group">
  <label for="highlight-color">Color para selecci√≥n</label>
  <select id="highlight-color" class="styled-select">
    <option value="red">Rojo</option>
    <option value="green">Verde</option>
    <option value="blue">Azul</option>
    <option value="yellow">Amarillo</option>
    <option value="magenta">Magenta</option>
    <option value="cyan">Cian</option>
    <option value="resname">Residuo</option>
  </select>
</div>

<div class="control-group">
  <label for="highlight-style">Visualizacion para selecci√≥n</label>
  <select id="highlight-style" class="styled-select">
     <option value="surface">Surface</option>
     <option value="ball+stick">Ball+Stick</option>
     <option value="spacefill">Spacefill</option>
     <option value="licorice">Licorice</option>
     <option value="trace">Trace</option>
     <option value="tube">Tube</option>
     <option value="backbone">Backbone</option>
     <option value="contact">Contact Points</option>
     <option value="helixorient">Helix Orientation</option>
     <option value="hyperball">Hyperball</option>
     <option value="line">Line</option>
     <option value="point">Points</option>
  </select>
</div>


<button onclick="resaltarSeleccion()">üîç Resaltar selecci√≥n</button>
<button onclick="limpiarSeleccion()">üßπ Limpiar selecci√≥n</button>

 
  <button onclick="descargarImagen()">
    <span class="icon">üì∏</span> Capturar
  </button>
  
  <button onclick="pantallaCompleta()">
    <span class="icon">üñ•Ô∏è</span> Pant. completa
  </button>
  
  <button onclick="cambiarPerspectiva()">
    <span class="icon">üé•</span> Perspectiva
  </button>
  
  <button id="autoSpinBtn" onclick="toggleAutoSpin()">
    <span class="icon">üîÑ</span> Rotaci√≥n: OFF
  </button>
</div>

<!-- Selector para alineamiento -->
<div class="control-group">
  <label for="align-select">Modelo para alinear</label>
  <select id="align-select" class="styled-select">
    <option value="">-- Seleccionar --</option>
    <option value="structure_file/fold_2025_05_13_12_36_178_44_dominio_c_terminal_model_0.cif">Modelo 0</option>
    <option value="structure_file/fold_2025_05_13_12_36_178_44_dominio_c_terminal_model_1.cif">Modelo 1</option>
    <option value="structure_file/fold_2025_05_13_12_36_178_44_dominio_c_terminal_model_2.cif">Modelo 2</option>
    <option value="structure_file/fold_2025_05_13_12_36_178_44_dominio_c_terminal_model_3.cif">Modelo 3</option>
  </select>
</div>

<button onclick="alinearEstructuras()">üîÑ Alinear Estructuras</button>
<button onclick="limpiarAlineamiento()">üßπ Limpiar Alineamiento</button>

<div class="control-group" style="margin-top:1em;">
  <label>üß´ Membrana simulada</label>
  <button onclick="toggleMembrane()">üîÅ Activar / Desactivar</button>
  <label for="membrane-x">Posici√≥n X</label>
  <input type="range" id="membrane-x" min="-100" max="100" value="0" step="1" oninput="updateMembranePosition()">
  <label for="membrane-y">Posici√≥n Y</label>
  <input type="range" id="membrane-y" min="-100" max="100" value="0" step="1" oninput="updateMembranePosition()">
  <label for="membrane-z">Posici√≥n Z</label>
  <input type="range" id="membrane-z" min="-100" max="100" value="0" step="1" oninput="updateMembranePosition()">
</div>

<div id="viewport" style="width: 100%; height: 600px;"></div>

<script src="https://unpkg.com/ngl@2.0.0-dev.38/dist/ngl.js"></script>
<script>
  let stage = new NGL.Stage("viewport", { backgroundColor: "white" });
  let currentComponent;
  let currentPerspective = "perspective";
  let autoSpin = false;

  // Representaciones activas: cartoon activo por defecto
  let activeReps = new Set(["cartoon"]);

  // Funci√≥n para cargar modelo
  function cargarModelo(file) {
    stage.removeAllComponents();
    stage.loadFile(file).then(component => {
      currentComponent = component;
      actualizarRepresentaciones();
      stage.autoView();
      stage.setSpin(autoSpin);
      actualizarBotonAutoSpin();
    });
  }

  // Actualiza las representaciones activas seg√∫n activeReps y color
  function actualizarRepresentaciones() {
    if (!currentComponent) return;
    currentComponent.removeAllRepresentations();
    const color = document.getElementById("color-select").value;
    activeReps.forEach(rep => {
      currentComponent.addRepresentation(rep, { colorScheme: color });
    });
    currentComponent.autoView();
  }

  // Cambiar color: actualiza todas las representaciones
  document.getElementById("color-select").addEventListener("change", actualizarRepresentaciones);

  // Manejar clics en botones toggle de representaciones
  document.getElementById("rep-toggle-group").addEventListener("click", e => {
    if (!e.target.classList.contains("rep-toggle-button")) return;
    const rep = e.target.getAttribute("data-rep");
    if (activeReps.has(rep)) {
      activeReps.delete(rep);
      e.target.classList.remove("active");
    } else {
      activeReps.add(rep);
      e.target.classList.add("active");
    }
    actualizarRepresentaciones();
  });

  // Cambio de modelo
  document.getElementById("model-select").addEventListener("change", e => {
    cargarModelo(e.target.value);
  });

  // Funciones auxiliares
  function toggleAutoSpin() {
    autoSpin = !autoSpin;
    stage.setSpin(autoSpin);
    actualizarBotonAutoSpin();
  }

  function actualizarBotonAutoSpin() {
    const btn = document.getElementById("autoSpinBtn");
    btn.textContent = autoSpin ? "üîÑ Auto-rotaci√≥n: ON" : "üîÑ Auto-rotaci√≥n: OFF";
  }

  function descargarImagen() {
    stage.makeImage({ factor: 2 }).then(blob => {
      NGL.download(blob, "estructura.png");
    });
  }

  function pantallaCompleta() {
    const elem = document.getElementById("viewport");
    if (elem.requestFullscreen) {
      elem.requestFullscreen();
    } else if (elem.webkitRequestFullscreen) {
      elem.webkitRequestFullscreen();
    } else if (elem.msRequestFullscreen) {
      elem.msRequestFullscreen();
    }
  }

  function cambiarPerspectiva() {
    currentPerspective = (currentPerspective === "perspective") ? "orthographic" : "perspective";
    stage.setParameters({ cameraType: currentPerspective });
  }

 function resaltarSeleccion() {
  if (!currentComponent) return;

  const rango = document.getElementById("range-select").value.trim();
  const residuos = document.getElementById("residue-select").value.trim();
  const color = document.getElementById("highlight-color").value;
  const style = document.getElementById("highlight-style").value;
  
  let seleccion = [];

  if (rango.match(/^\d+\s*-\s*\d+$/)) {
    const [start, end] = rango.split("-").map(v => v.trim());
    seleccion.push(`${start}-${end}`);
  }

  if (residuos.length > 0) {
    const residuosClean = residuos.split(",").map(r => r.trim().toUpperCase()).filter(r => r.length === 3);
    if (residuosClean.length > 0) {
      const resList = residuosClean.join(" ");
      seleccion.push(`:resname ${resList}`);  // <-- Cambiado aqu√≠
    } else {
      alert("Ingrese residuos v√°lidos (3 letras cada uno, separados por coma). Ej: CYS,ALA");
      return;
    }
  }
  // if (residuos.match(/^([A-Z]{3})(,[A-Z]{3})*$/i)) {
  //   const resList = residuos.split(",").map(r => r.trim().toUpperCase()).join(" ");
  //   seleccion.push(`:${resList}`);
  // }

  const selString = seleccion.join(" and ");

  if (selString) {
    currentComponent.addRepresentation(style, {
      sele: selString,
      color: color,
      opacity: 1.0
    });
  }
}

function limpiarSeleccion() {
  if (!currentComponent) return;

  // Eliminamos todas las representaciones para empezar limpio
  currentComponent.removeAllRepresentations();

  // Volvemos a agregar solo la representaci√≥n base, por ejemplo cartoon gris
  currentComponent.addRepresentation("cartoon", {
    color: "chainid",
    opacity: 1
  });

  // Actualizamos la vista
  currentComponent.autoView();
}

  let alignedComponent; // para guardar el modelo alineado

  function alinearEstructuras() {
    const fileToAlign = document.getElementById("align-select").value;
    if (!fileToAlign || !currentComponent) {
      alert("Por favor, selecciona un modelo y aseg√∫rate de que uno est√© cargado.");
      return;
    }

    // Si ya hab√≠a un componente alineado, lo removemos
    if (alignedComponent) {
      alignedComponent.removeRepresentation(alignedComponent.representationsList[0]);
      stage.removeComponent(alignedComponent);
      alignedComponent = null;
    }

    // Cargamos el modelo a alinear
    stage.loadFile(fileToAlign).then(component => {
      alignedComponent = component;

      // Alineamos el componente nuevo al componente actual
      alignedComponent.superpose(currentComponent);

      // Mostramos con cartoon por defecto
      alignedComponent.addRepresentation("cartoon", { color: "modelindex" });

      // Lo agregamos a la vista
      alignedComponent.autoView();
    });
  }

  function limpiarAlineamiento() {
    if (alignedComponent) {
      alignedComponent.removeAllRepresentations();
      stage.removeComponent(alignedComponent);
      alignedComponent = null;
    }
    stage.autoView();
  }

  // Carga inicial
  cargarModelo(document.getElementById("model-select").value);
</script>


```
