## üß¨ Visualizaci√≥n interactiva

```{=html}
<style>
  /* Estilos para los botones toggle de representaciones */
  .rep-toggle-group {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5em;
  }
  .rep-toggle-button {
    padding: 0.4em 0.9em;
    background: #e9ecef;
    border-radius: 6px;
    border: 1px solid #ced4da;
    cursor: pointer;
    user-select: none;
    font-size: 0.9em;
    color: #495057;
    transition: background-color 0.2s, border-color 0.2s, color 0.2s;
  }
  .rep-toggle-button.active {
    background: #4dabf7;
    border-color: #339af0;
    color: white;
  }
</style>

<div class="viewer-controls">

  <!-- Select para modelos -->
  <div class="control-group">
    <label for="model-select">Modelo</label>
    <select id="model-select" class="styled-select">
      <option value="structure_file/fold_2025_05_13_12_36_178_44_dominio_c_terminal_model_0.cif">Modelo 0</option>
      <option value="structure_file/fold_2025_05_13_12_36_178_44_dominio_c_terminal_model_1.cif">Modelo 1</option>
      <option value="structure_file/fold_2025_05_13_12_36_178_44_dominio_c_terminal_model_2.cif">Modelo 2</option>
      <option value="structure_file/fold_2025_05_13_12_36_178_44_dominio_c_terminal_model_3.cif">Modelo 3</option>
      <option value="structure_file/fold_2025_05_13_12_36_178_44_dominio_c_terminal_model_4.cif" selected>Modelo 4</option>
    </select>
  </div>

  <!-- Select para color -->
  <div class="control-group">
    <label for="color-select">Color</label>
    <select id="color-select" class="styled-select">
      <option value="chainid" selected>Cadenas</option>
      <option value="element">Elemento</option>
      <option value="resname">Residuo</option>
      <option value="residueindex">√çndice</option>
      <option value="uniform">Uniforme</option>
      <option value="secondary">Estructura Secundaria (Helix/Sheet/Loop)</option>
      <option value="hydrophobicity">Hidrofobicidad</option>
      <option value="bfactor">B-factor (Flexibilidad)</option>
      <option value="spectrum">Espectro (Rainbow)</option>
      <option value="sstruc">Tipo de H√©lice (Œ±/Œ≤/œÄ)</option>
      <option value="modelindex">Por Modelo (NMR/Multi-model)</option>
      <option value="partialcharge">Carga Parcial</option>
    </select>
  </div>

  <!-- Botones toggle para visualizaci√≥n m√∫ltiple -->
  <div class="control-group" style="flex-direction: column; align-items: flex-start;">
    <label>Visualizaci√≥n (puedes seleccionar varias):</label>
    <div id="rep-toggle-group" class="rep-toggle-group">
      <div class="rep-toggle-button active" data-rep="cartoon">Cartoon</div>
      <div class="rep-toggle-button" data-rep="surface">Surface</div>
      <div class="rep-toggle-button" data-rep="ball+stick">Ball+Stick</div>
      <div class="rep-toggle-button" data-rep="spacefill">Spacefill</div>
      <div class="rep-toggle-button" data-rep="licorice">Licorice</div>
      <div class="rep-toggle-button" data-rep="trace">Trace</div>
      <div class="rep-toggle-button" data-rep="tube">Tube</div>
      <div class="rep-toggle-button" data-rep="backbone">Backbone</div>
      <div class="rep-toggle-button" data-rep="contact">Contact Points</div>
      <div class="rep-toggle-button" data-rep="helixorient">Helix Orientation</div>
      <div class="rep-toggle-button" data-rep="hyperball">Hyperball</div>
      <div class="rep-toggle-button" data-rep="line">Line</div>
      <div class="rep-toggle-button" data-rep="point">Points</div>
    </div>
  </div>
<!-- seleccionar -->
 
  <button onclick="descargarImagen()">
    <span class="icon">üì∏</span> Capturar
  </button>
  
  <button onclick="pantallaCompleta()">
    <span class="icon">üñ•Ô∏è</span> Pant. completa
  </button>
  
  <button onclick="cambiarPerspectiva()">
    <span class="icon">üé•</span> Perspectiva
  </button>
  
  <button id="autoSpinBtn" onclick="toggleAutoSpin()">
    <span class="icon">üîÑ</span> Rotaci√≥n: OFF
  </button>
</div>

<div id="viewport" style="width: 100%; height: 600px;"></div>

<script src="https://unpkg.com/ngl@2.0.0-dev.38/dist/ngl.js"></script>
<script>
  let stage = new NGL.Stage("viewport", { backgroundColor: "white" });
  let currentComponent;
  let currentPerspective = "perspective";
  let autoSpin = false;

  // Representaciones activas: cartoon activo por defecto
  let activeReps = new Set(["cartoon"]);

  // Funci√≥n para cargar modelo
  function cargarModelo(file) {
    stage.removeAllComponents();
    stage.loadFile(file).then(component => {
      currentComponent = component;
      actualizarRepresentaciones();
      stage.autoView();
      stage.setSpin(autoSpin);
      actualizarBotonAutoSpin();
    });
  }

  // Actualiza las representaciones activas seg√∫n activeReps y color
  function actualizarRepresentaciones() {
    if (!currentComponent) return;
    currentComponent.removeAllRepresentations();
    const color = document.getElementById("color-select").value;
    activeReps.forEach(rep => {
      currentComponent.addRepresentation(rep, { colorScheme: color });
    });
    currentComponent.autoView();
  }

  // Cambiar color: actualiza todas las representaciones
  document.getElementById("color-select").addEventListener("change", actualizarRepresentaciones);

  // Manejar clics en botones toggle de representaciones
  document.getElementById("rep-toggle-group").addEventListener("click", e => {
    if (!e.target.classList.contains("rep-toggle-button")) return;
    const rep = e.target.getAttribute("data-rep");
    if (activeReps.has(rep)) {
      activeReps.delete(rep);
      e.target.classList.remove("active");
    } else {
      activeReps.add(rep);
      e.target.classList.add("active");
    }
    actualizarRepresentaciones();
  });

  // Cambio de modelo
  document.getElementById("model-select").addEventListener("change", e => {
    cargarModelo(e.target.value);
  });

  // Funciones auxiliares
  function toggleAutoSpin() {
    autoSpin = !autoSpin;
    stage.setSpin(autoSpin);
    actualizarBotonAutoSpin();
  }

  function actualizarBotonAutoSpin() {
    const btn = document.getElementById("autoSpinBtn");
    btn.textContent = autoSpin ? "üîÑ Auto-rotaci√≥n: ON" : "üîÑ Auto-rotaci√≥n: OFF";
  }

  function descargarImagen() {
    stage.makeImage({ factor: 2 }).then(blob => {
      NGL.download(blob, "estructura.png");
    });
  }

  function pantallaCompleta() {
    const elem = document.getElementById("viewport");
    if (elem.requestFullscreen) {
      elem.requestFullscreen();
    } else if (elem.webkitRequestFullscreen) {
      elem.webkitRequestFullscreen();
    } else if (elem.msRequestFullscreen) {
      elem.msRequestFullscreen();
    }
  }

  function cambiarPerspectiva() {
    currentPerspective = (currentPerspective === "perspective") ? "orthographic" : "perspective";
    stage.setParameters({ cameraType: currentPerspective });
  }

  // Carga inicial
  cargarModelo(document.getElementById("model-select").value);
</script>


```
