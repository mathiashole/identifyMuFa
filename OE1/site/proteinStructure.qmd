## üß¨ Visualizaci√≥n interactiva

```{=html}
<style>
  .viewer-controls {
    margin-bottom: 1em;
    text-align: center;
  }
  .viewer-controls > * {
    margin: 0 1em 1em 1em;
  }
  /* Opcional: para que el contenedor de viewport tenga borde sutil */
  #viewport {
    border: 1px solid #ccc;
  }
</style>

<div class="viewer-controls">
  <label for="model-select">Modelo:</label>
  <select id="model-select">
    <option value="fold_2025_05_13_12_36_178_44_dominio_c_terminal_model_0.cif">Modelo 0</option>
    <option value="fold_2025_05_13_12_36_178_44_dominio_c_terminal_model_1.cif">Modelo 1</option>
    <option value="fold_2025_05_13_12_36_178_44_dominio_c_terminal_model_2.cif">Modelo 2</option>
    <option value="fold_2025_05_13_12_36_178_44_dominio_c_terminal_model_3.cif">Modelo 3</option>
    <option value="fold_2025_05_13_12_36_178_44_dominio_c_terminal_model_4.cif" selected>Modelo 4</option>
  </select>

  <label for="color-select"> üé® Color:</label>
  <select id="color-select">
    <option value="chainid" selected>Cadenas</option>
    <option value="element">Elemento</option>
    <option value="resname">Nombre de residuo</option>
    <option value="residueindex">√çndice de residuo</option>
    <option value="uniform">Uniforme</option>
  </select>

  <label for="rep-select"> üß± Representaci√≥n:</label>
  <select id="rep-select">
    <option value="cartoon" selected>Cartoon</option>
    <option value="surface">Surface</option>
    <option value="ball+stick">Ball + Stick</option>
    <option value="spacefill">Spacefill</option>
    <option value="licorice">Licorice</option>
  </select>

  <button onclick="descargarImagen()">üì∏ Imagen</button>
  <button onclick="pantallaCompleta()">üñ•Ô∏è Pantalla completa</button>
  <button onclick="cambiarPerspectiva()">üé• Perspectiva</button>
  <button id="autoSpinBtn" onclick="toggleAutoSpin()">üîÑ Auto-rotaci√≥n: OFF</button>
</div>

<div id="viewport" style="width: 100%; height: 500px; border: 1px solid #ccc;"></div>

<script src="https://unpkg.com/ngl@2.0.0-dev.38/dist/ngl.js"></script>
<script>
  let stage = new NGL.Stage("viewport", { backgroundColor: "white" });
  let currentComponent;
  let currentPerspective = "perspective";
  let autoSpin = false;  // Estado inicial: auto rotaci√≥n apagada

  function cargarModelo(file) {
    stage.removeAllComponents();
    stage.loadFile(file).then(function (component) {
      currentComponent = component;
      actualizarRepresentacion();
      stage.autoView();
      // Al cargar un modelo, respetamos el estado actual de autoSpin
      stage.setSpin(autoSpin);
      actualizarBotonAutoSpin();
    });
  }

  function actualizarRepresentacion() {
    if (!currentComponent) return;
    currentComponent.removeAllRepresentations();
    const rep = document.getElementById("rep-select").value;
    const color = document.getElementById("color-select").value;
    currentComponent.addRepresentation(rep, { colorScheme: color });
    currentComponent.autoView();
  }

  function toggleAutoSpin() {
    autoSpin = !autoSpin;
    stage.setSpin(autoSpin);
    actualizarBotonAutoSpin();
  }

  function actualizarBotonAutoSpin() {
    const btn = document.getElementById("autoSpinBtn");
    btn.textContent = autoSpin ? "üîÑ Auto-rotaci√≥n: ON" : "üîÑ Auto-rotaci√≥n: OFF";
  }

  document.getElementById("model-select").addEventListener("change", function () {
    cargarModelo(this.value);
  });

  document.getElementById("color-select").addEventListener("change", actualizarRepresentacion);
  document.getElementById("rep-select").addEventListener("change", actualizarRepresentacion);

  function descargarImagen() {
    stage.makeImage({ factor: 2 }).then(function (blob) {
      NGL.download(blob, "estructura.png");
    });
  }

  function pantallaCompleta() {
    const elem = document.getElementById("viewport");
    if (elem.requestFullscreen) {
      elem.requestFullscreen();
    } else if (elem.webkitRequestFullscreen) {
      elem.webkitRequestFullscreen();
    } else if (elem.msRequestFullscreen) {
      elem.msRequestFullscreen();
    }
  }

  function cambiarPerspectiva() {
    currentPerspective = (currentPerspective === "perspective") ? "orthographic" : "perspective";
    stage.setParameters({ cameraType: currentPerspective });
  }

  // Cargar modelo inicial
  cargarModelo(document.getElementById("model-select").value);
</script>

```
