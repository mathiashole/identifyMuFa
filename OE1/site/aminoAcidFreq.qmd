---
title: "Amino acid frequency"
author: "Mathias"
format:
  html:
    theme: united
    code-fold: true
    code-link: true
    number-sections: true
    highlight-style: github
---

![](https://img.itch.zone/aW1nLzE3MTEyNjE5LmdpZg==/original/2%2BYVZg.gif){style="float:right;" fig-alt="Illustration of a detective cat. Artwork by @shigemi.itch.io." width="301"}

## 🧬 Análisis de la composición de aminoácidos

Los aminoácidos son los componentes fundamentales de las proteínas, y su composición puede ofrecer información valiosa sobre las propiedades funcionales, estructurales y evolutivas de las secuencias codificantes. 🔍
En este análisis se comparan dos grupos de secuencias:

🧪 Secuencias DGF-1: proteínas pertenecientes a la familia multigénica DGF-1 de Trypanosoma cruzi. Esta familia se ha asociado con procesos de interacción parásito-hospedador y presenta una alta variabilidad, por lo que resulta de especial interés biológico.

🧬 Proteínas codificantes del genoma: conjunto de proteínas anotadas como codificantes en los genomas de referencia, usadas como contexto comparativo.

A partir de ambas fuentes, se calcularon las frecuencias relativas de cada aminoácido en cada proteína. Luego, estas frecuencias fueron transformadas a porcentajes para facilitar la comparación, y se calcularon estadísticas resumen (media y desviación estándar) por grupo.

El objetivo es evaluar si las proteínas DGF-1 presentan un perfil distintivo en su composición de aminoácidos, lo que podría revelar rasgos funcionales particulares o pistas sobre su historia evolutiva. 🌐

```{css}
#| echo: false

p {
  text-align: justify
}

```


```{r}
#| label: charged global variables
#| echo: false
#| warning: false

key_name <- "DGF-1"

genome_name <- c("TriTrypDB-68_TcruziDm28c2018_Genome.fasta", "TriTrypDB-68_TcruziBrazilA4_Genome.fasta", "TriTrypDB-68_TcruziYC6_Genome.fasta", "TcDm25_TcruziTcDm25H1_Genome.fasta")

```

```{r}
#| label: load packages to frequency
#| echo: true
#| warning: false

# Load necessary libraries
#library(data.table)
library(seqinr)
library(ggplot2)
library(ggfortify)
library(tidyverse)

```


```{r}
#| label: charged amino acid table usage
#| echo: false
#| warning: false

# Crear el dataframe con la tabla de aminoácidos
amino_acids_table <- data.frame(
  Amino_Acid = c("Alanine", "Arginine", "Asparagine", "Aspartic acid", 
                 "Cysteine", "Glutamine", "Glutamic acid", "Glycine", 
                 "Histidine", "Isoleucine", "Leucine", "Lysine", 
                 "Methionine", "Phenylalanine", "Proline", "Serine", 
                 "Threonine", "Tryptophan", "Tyrosine", "Valine"),
  Three_Letter_Abbreviation = c("Ala", "Arg", "Asn", "Asp", "Cys", "Gln", 
                                "Glu", "Gly", "His", "Ile", "Leu", "Lys", 
                                "Met", "Phe", "Pro", "Ser", "Thr", "Trp", 
                                "Tyr", "Val"),
  One_Letter_Symbol = c("A", "R", "N", "D", "C", "Q", "E", "G", "H", 
                        "I", "L", "K", "M", "F", "P", "S", "T", "W", 
                        "Y", "V"),
  Molecular_Weight = c(89, 174, 132, 133, 121, 146, 147, 75, 155, 131, 
                       131, 146, 149, 165, 115, 105, 119, 204, 181, 117)
)

print(format(amino_acids_table, justify = "centre"), row.names = FALSE)

```

```{r}
#| label: main function to calculated amino acid frequencies 
#| echo: true

calculate_amino_acid_frequencies <- function(file) {
  fasta <- read.fasta(file, seqtype = "AA")  # Leer archivo multifasta de aminoácidos

  amino_acids <- c("A", "R", "N", "D", "C", "Q", "E", "G", "H", "I", "L", "K", "M", "F", "P", "S", "T", "W", "Y", "V")

  # Procesar cada secuencia en el archivo
  results <- lapply(names(fasta), function(seq_id) {
    seq <- toupper(getSequence(fasta[[seq_id]], as.string = TRUE)[[1]])  # Convertir a texto y mayúsculas
    aa_counts <- table(factor(strsplit(seq, "")[[1]], levels = amino_acids))  # Contar aminoácidos con niveles

    total_aa <- sum(aa_counts)  # Total de aminoácidos en la secuencia

    # Crear un dataframe de frecuencias por aminoácido
    freq_df <- data.frame(AminoAcid = names(aa_counts), 
                          Frequency = as.vector(aa_counts) / total_aa)

    # Pivotar el dataframe para tener aminoácidos como columnas
    freq_wide <- freq_df %>%
      pivot_wider(names_from = AminoAcid, values_from = Frequency, 
                  values_fill = list(Frequency = 0))  # Llenar valores faltantes con 0

    # Agregar columnas con el nombre del archivo y el ID de la secuencia
    freq_wide <- freq_wide %>%
      mutate(File = basename(file), Sequence_ID = seq_id) %>%
      relocate(File, Sequence_ID)  # Asegurar el orden de las columnas

    return(freq_wide)
  })

  # Combinar resultados de todas las secuencias en un archivo
  bind_rows(results)
}

# === 1. Leer y preparar los datos de proteínas codificantes ===
combined_freqs_coding_prot <- read.delim("amino_acid_frequency_all_protein_coding.tsv", header = TRUE)
combined_freqs_coding_prot[3:22] <- lapply(combined_freqs_coding_prot[3:22], as.numeric)

combined_freqs_coding_prot$File <- gsub(".*_([A-Za-z0-9]+)_translated\\.fasta", "\\1", combined_freqs_coding_prot$File)

long_freqs_coding_prot <- combined_freqs_coding_prot %>%
  pivot_longer(cols = 3:22, names_to = "AminoAcid", values_to = "Freq") %>%
  mutate(Freq = Freq * 100)

summary_data_coding_prot <- long_freqs_coding_prot %>%
  group_by(File, AminoAcid) %>%
  summarise(mean_freq = mean(Freq), sd_freq = sd(Freq), .groups = "drop")

summary_data_coding_prot$supp <- "Other"

# === 2. Leer y preparar los datos de secuencias objetivo ===
all_frequencies_target <- read.delim("aminoacid_frequency_re_anotacion.tsv", header = TRUE)
all_frequencies_target[3:22] <- lapply(all_frequencies_target[3:22], as.numeric)

all_frequencies_target$File <- gsub(".*_([A-Za-z0-9]+)_Genome\\.fasta", "\\1", all_frequencies_target$File)

long_freqs_target <- all_frequencies_target %>%
  pivot_longer(cols = 3:22, names_to = "AminoAcid", values_to = "Freq") %>%
  mutate(Freq = Freq * 100)

summary_data_target <- long_freqs_target %>%
  group_by(File, AminoAcid) %>%
  summarise(mean_freq = mean(Freq), sd_freq = sd(Freq), .groups = "drop")

# Asumimos que key_name ya está definido previamente
summary_data_target$supp <- key_name

```


## 📊 Comparación de perfiles de aminoácidos

Se construyeron gráficos de barras que muestran la frecuencia media (%) de cada aminoácido, junto con su desviación estándar (SD), diferenciando ambos grupos por color. 🟠🔵

Cada gráfico representa una comparación individual entre una proteína DGF-1 y el conjunto de proteínas codificantes, permitiendo observar patrones particulares o desviaciones notables en la abundancia relativa de ciertos residuos. 💡

```{r}
#| label: Created function to barplot contrast 
#| echo: true

# === 3. Unir los datos de ambas fuentes ===
combined_data <- bind_rows(summary_data_target, summary_data_coding_prot)

# Etiquetas de aminoácidos
amino_acids_one_letter <- c("A", "R", "N", "D", "C", "Q", "E", "G", "H", "I", 
                            "L", "K", "M", "F", "P", "S", "T", "W", "Y", "V")
amino_acids_three_letter <- c("Ala", "Arg", "Asn", "Asp", "Cys", "Gln", "Glu", "Gly", 
                              "His", "Ile", "Leu", "Lys", "Met", "Phe", "Pro", 
                              "Ser", "Thr", "Trp", "Tyr", "Val")

combined_data$AminoAcid <- factor(
  combined_data$AminoAcid,
  levels = amino_acids_one_letter,
  labels = amino_acids_three_letter
)

# === 4. Función para graficar ===
plot_barplot_contrast <- function(data, plot_title, y_label) {
  dodge <- position_dodge(width = 0.6)
  
  ggplot(data, aes(x = AminoAcid, y = mean_freq, fill = supp)) +
    geom_bar(stat = "identity", alpha = 0.7, width = 0.5, position = dodge) +
    geom_errorbar(aes(ymin = mean_freq - sd_freq, ymax = mean_freq + sd_freq, alpha = 0.3),
                  position = dodge, width = 0.2) +
    ylab(y_label) +
    labs(title = plot_title) +
    theme_minimal() +
    theme(
      axis.line.y = element_blank(),
      axis.ticks.y = element_blank(),
      axis.text.x = element_text(angle = 45, hjust = 1)
    )
}

# === 5. Graficar por cada File ===
for (file_name in unique(summary_data_target$File)) {
  data_subset <- combined_data %>%
    filter(File == file_name)

  print(plot_barplot_contrast(
    data_subset,
    plot_title = paste("Amino acid frequency -", file_name),
    y_label = "Amino acid content (%)"
  ))
}

```

## Diferencia estadistica entre la frequencya de aminoacidos

```{r}
#| label: Statistic diff
#| echo: true

library(ggpubr)

# Prueba de normalidad (K-S)
ks.test(subset(long_freqs_coding_prot, AminoAcid == "L")$Freq, "pnorm") # rechazo H0
ks.test(subset(long_freqs_target, AminoAcid == "L")$Freq, "pnorm") # Rechazo H0

# más de ~30 muestras por grupo, el t-test es bastante robusto

av_all_prot <- long_freqs_coding_prot
av_target <- long_freqs_target
av_all_prot$supp <- "Other"
av_target$supp <- key_name

combined_long_freqs <- bind_rows(av_target, av_all_prot)

library(broom)

# Comparación por t-test para cada aminoácido
diff_aminoacids <- combined_long_freqs %>%
  group_by(AminoAcid) %>%
  filter(!is.na(Freq)) %>%
  summarise(
    t_test = list(t.test(Freq ~ supp)),
    .groups = "drop"
  ) %>%
  mutate(
    tidy_res = map(t_test, broom::tidy)
  ) %>%
  unnest(tidy_res) %>%
  select(AminoAcid, estimate1, estimate2, p.value, conf.low, conf.high)

# p < 0.05 por defecto, podés ajustar si usás FDR
sig_diff <- diff_aminoacids %>%
  filter(p.value < 0.05) %>%
  arrange(p.value)

mayores_en_target <- subset(sig_diff, estimate1 > estimate2)

# Calcular diferencia (puede ser absoluta o simple)
mayores_en_target$difference <- mayores_en_target$estimate1 - mayores_en_target$estimate2

# Ordenar por mayor diferencia
mayores_en_target_ordenado <- mayores_en_target[order(-mayores_en_target$difference), ]

# mayores_significativos <- subset(mayores_en_target_ordenado, p.value < 0.05)

# mayores_significativos

```

## ✨ Agrupación de aminoácidos por propiedades químicas

Para complementar el análisis individual de los aminoácidos, realizamos una agrupación basada en sus propiedades químicas ⚗️. Esta clasificación permite observar patrones más amplios en la composición de las proteínas, agrupando los aminoácidos según características como su carga, polaridad, hidrofobicidad o presencia de anillos aromáticos 🔬.

En este caso, agrupamos los aminoácidos en las siguientes categorías:

    🧪 Alifáticos: Gly, Ala, Val, Leu, Ile

    🌸 Aromáticos: Phe, Trp, Tyr

    🌱 Con azufre: Cys, Met

    ⚡ Básicos (carga positiva): Lys, Arg, His

    🍋 Ácidos (carga negativa o derivados): Asp, Glu, Asn, Gln

    💧 Polares sin carga: Ser, Thr, Asn, Gln, Tyr

    🧷 Alifáticos hidroxilados: Ser, Thr

    🧲 Cargados positivamente: Lys, Arg, His

    🧪 Cargados negativamente: Asp, Glu

    ☀️ Hidrofóbicos: Ala, Val, Ile, Leu, Met, Phe, Trp, Gly, Pro, Cys

    💦 Hidrofílicos: Arg, Asn, Asp, Gln, Glu, Lys, Ser, Thr, Tyr, His

Esto nos permite comparar, por ejemplo, si la proteína `DGF-1` presenta una preferencia por residuos hidrofóbicos o cargados, en relación con el conjunto general de proteínas codificantes del genoma de Trypanosoma cruzi 🧬.

A continuación, se muestran los gráficos comparativos para cada genoma analizado:

```{r}
#| label: classification amino acids 
#| echo: true

classification_aminoacids <- function(data, genome_col = "File", id_col = "Sequence_ID", type = NULL) {
  result_combained_data <- data.frame(
    "Genome" = data[[ genome_col]],
    "id" = data[[ id_col]],
    "Aliphatic" = rowSums(data[, c("G", "A", "V", "L", "I")]),
    "Aromatic" = rowSums(data[, c("F", "W", "Y")]),
    "Sulphur" = rowSums(data[, c("C", "M")]),
    "Basic" = rowSums(data[, c("K", "R", "H")]),
    "Acidic" = rowSums(data[, c("D", "E", "N", "Q")]),  # nota: N y Q a veces no se incluyen como ácidos
    "Polar_Uncharged" = rowSums(data[, c("S", "T", "N", "Q", "Y")]),  # Polar pero sin carga
    "AliphaticHydroxyl" = rowSums(data[, c("S", "T")]),
    "Positive_Charge" = rowSums(data[, c("K", "R", "H")]),  # Lisina, Arginina, Histidina
    "Negative_Charge" = rowSums(data[, c("D", "E")]),       # Aspartato, Glutamato
    # "tRNAsynthetaseClassI" = rowSums(data[, c("E", "Q", "R", "C", "M", "V", "I", "L", "Y", "W")]),
    # "tRNAsynthetaseClassII" = rowSums(data[, c("G", "A", "P", "S", "T", "H", "D", "N", "K", "F")]),
    "Hydrophobic" = rowSums(data[, c("A", "V", "I", "L", "M", "F", "W", "G", "P", "C")]),
    "Hydrophilic" = rowSums(data[, c("R", "N", "D", "Q", "E", "K", "S", "T", "Y", "H")])
  )
  return(result_combained_data)
}

# 1. Calcular clasificación por grupo químico de aminoácidos
classfied_amino_acids_targt <- classification_aminoacids(all_frequencies_target)
classfied_amino_acids_coding_prot <- classification_aminoacids(combined_freqs_coding_prot)

# Agregamos una columna de origen a cada conjunto
classfied_amino_acids_targt$group <- key_name
classfied_amino_acids_coding_prot$group <- "Other"

# Unimos los datasets
combined_groups <- bind_rows(classfied_amino_acids_targt, classfied_amino_acids_coding_prot)

# 2. Columnas de interés
# Seleccionamos solo las columnas numéricas de los grupos
group_columns <- c(
  "Aliphatic", "Aromatic", "Sulphur", "Basic", "Acidic", "Polar_Uncharged", "Positive_Charge", "Negative_Charge", "AliphaticHydroxyl", "Hydrophobic", "Hydrophilic"
)

# 3. Convertir a formato largo
long_data <- combined_groups %>%
  pivot_longer(cols = all_of(group_columns), names_to = "AminoAcidGroup", values_to = "Frequency")

# 4. Calcular medias y SD por genoma y grupo
summary_data_by_genome <- long_data %>%
  group_by(Genome, group, AminoAcidGroup) %>%
  summarise(
    mean_freq = mean(Frequency),
    sd_freq = sd(Frequency),
    .groups = "drop"
  )

library(RColorBrewer)
# 5. Paleta de colores
group_levels <- unique(summary_data_by_genome$group)
palette_colors <- setNames(brewer.pal(n = length(group_levels), name = "Set1"), group_levels)

# 6. Hacer un gráfico por genoma
for (genome in unique(summary_data_by_genome$Genome)) {
  data_subset <- filter(summary_data_by_genome, Genome == genome)

  # p <- ggplot(data_subset, aes(x = AminoAcidGroup, y = mean_freq, fill = group)) +
  #   geom_bar(stat = "identity", position = position_dodge(width = 0.9)) +
  #   geom_errorbar(aes(ymin = mean_freq - sd_freq, ymax = mean_freq + sd_freq),
  #                 position = position_dodge(width = 0.9), width = 0.3) +
  #   scale_fill_manual(values = palette_colors) +
  #   labs(
  #     title = paste("Amino Acid Group Composition -", genome),
  #     x = "Amino Acid Group",
  #     y = "Mean Frequency ± SD"
  #   ) +
  #   theme_minimal() +
  #   theme(axis.text.x = element_text(angle = 45, hjust = 1))

  # print(p)
    p <- ggplot(data_subset, aes(x = AminoAcidGroup, y = mean_freq, fill = group)) +
    geom_bar(stat = "identity", position = position_dodge(width = 0.9)) +
    geom_errorbar(aes(ymin = mean_freq - sd_freq, ymax = mean_freq + sd_freq),
                  position = position_dodge(width = 0.9), width = 0.3) +
    geom_text(
      aes(label = round(mean_freq, 2)),  # redondea a 2 decimales
      position = position_dodge(width = 0.9),
      vjust = -0.5,
      size = 3
    ) +
    scale_fill_manual(values = palette_colors) +
    labs(
      title = paste("Amino Acid Group Composition -", genome),
      x = "Amino Acid Group",
      y = "Mean Frequency ± SD"
    ) +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))

  print(p)
}
  

```

## 🧬 Visualización interactiva

```{=html}
<style>
  .viewer-controls {
    margin-bottom: 1em;
  }
  .viewer-controls > * {
    margin-right: 1em;
  }
</style>

<div class="viewer-controls">
  <label for="model-select">Modelo:</label>
  <select id="model-select">
    <option value="fold_2025_05_13_12_36_178_44_dominio_c_terminal_model_0.cif">Modelo 0</option>
    <option value="fold_2025_05_13_12_36_178_44_dominio_c_terminal_model_1.cif">Modelo 1</option>
    <option value="fold_2025_05_13_12_36_178_44_dominio_c_terminal_model_2.cif">Modelo 2</option>
    <option value="fold_2025_05_13_12_36_178_44_dominio_c_terminal_model_3.cif">Modelo 3</option>
    <option value="fold_2025_05_13_12_36_178_44_dominio_c_terminal_model_4.cif" selected>Modelo 4</option>
  </select>

  <label for="color-select">Color:</label>
  <select id="color-select">
    <option value="chainid" selected>Cadenas</option>
    <option value="element">Elemento</option>
    <option value="resname">Nombre de residuo</option>
    <option value="residueindex">Índice de residuo</option>
    <option value="uniform">Uniforme</option>
  </select>

  <label for="rep-select">Representación:</label>
  <select id="rep-select">
    <option value="cartoon" selected>Cartoon</option>
    <option value="surface">Surface</option>
    <option value="ball+stick">Ball + Stick</option>
    <option value="spacefill">Spacefill</option>
    <option value="licorice">Licorice</option>
  </select>

  <button onclick="descargarImagen()">📸 Imagen</button>
  <button onclick="pantallaCompleta()">🖥️ Pantalla completa</button>
  <button onclick="cambiarPerspectiva()">🎥 Perspectiva</button>
</div>

<div id="viewport" style="width: 100%; height: 500px; border: 1px solid #ccc;"></div>

<script src="https://unpkg.com/ngl@2.0.0-dev.38/dist/ngl.js"></script>
<script>
  let stage = new NGL.Stage("viewport", { backgroundColor: "white" });
  let currentComponent;
  let currentPerspective = "perspective";

  function cargarModelo(file) {
    stage.removeAllComponents();
    stage.loadFile(file).then(function (component) {
      currentComponent = component;
      actualizarRepresentacion();
    });
  }

  function actualizarRepresentacion() {
    if (!currentComponent) return;
    currentComponent.removeAllRepresentations();
    const rep = document.getElementById("rep-select").value;
    const color = document.getElementById("color-select").value;
    currentComponent.addRepresentation(rep, { colorScheme: color });
    currentComponent.autoView();
  }

  document.getElementById("model-select").addEventListener("change", function () {
    cargarModelo(this.value);
  });

  document.getElementById("color-select").addEventListener("change", actualizarRepresentacion);
  document.getElementById("rep-select").addEventListener("change", actualizarRepresentacion);

  function descargarImagen() {
    stage.makeImage({ factor: 2 }).then(function (blob) {
      NGL.download(blob, "estructura.png");
    });
  }

  function pantallaCompleta() {
    const elem = document.getElementById("viewport");
    if (elem.requestFullscreen) {
      elem.requestFullscreen();
    } else if (elem.webkitRequestFullscreen) {
      elem.webkitRequestFullscreen();
    } else if (elem.msRequestFullscreen) {
      elem.msRequestFullscreen();
    }
  }

  function cambiarPerspectiva() {
    currentPerspective = (currentPerspective === "perspective") ? "orthographic" : "perspective";
    stage.setParameters({ cameraType: currentPerspective });
  }

  // Cargar modelo inicial
  cargarModelo(document.getElementById("model-select").value);
</script>
```