---
title: "Amino acid frequency"
author: "Mathias"
format:
  html:
    theme: united
    code-fold: true
    code-link: true
    number-sections: true
    highlight-style: github
---

![](https://img.itch.zone/aW1nLzE3MTEyNjE5LmdpZg==/original/2%2BYVZg.gif){style="float:right;" fig-alt="Illustration of a detective cat. Artwork by @shigemi.itch.io." width="301"}

## 🔍 ¿Qué descubrimos?

En este análisis entendermos los patrones ocultos en la composición de aminoácidos de proteínas codificantes de Trypanosoma cruzi, comparando:

```{css}
#| echo: false

p {
  text-align: justify
}

```


```{r}
#| label: charged global variables
#| echo: false
#| warning: false

key_name <- "DGF-1"

genome_name <- c("TriTrypDB-68_TcruziDm28c2018_Genome.fasta", "TriTrypDB-68_TcruziBrazilA4_Genome.fasta", "TriTrypDB-68_TcruziYC6_Genome.fasta", "TcDm25_TcruziTcDm25H1_Genome.fasta")

```

```{r}
#| label: load packages to frequency
#| echo: true
#| warning: false

# Load necessary libraries
#library(data.table)
library(seqinr)
library(ggplot2)
library(ggfortify)
library(tidyverse)

```


```{r}
#| label: charged amino acid table usage
#| echo: false
#| warning: false

# Crear el dataframe con la tabla de aminoácidos
amino_acids_table <- data.frame(
  Amino_Acid = c("Alanine", "Arginine", "Asparagine", "Aspartic acid", 
                 "Cysteine", "Glutamine", "Glutamic acid", "Glycine", 
                 "Histidine", "Isoleucine", "Leucine", "Lysine", 
                 "Methionine", "Phenylalanine", "Proline", "Serine", 
                 "Threonine", "Tryptophan", "Tyrosine", "Valine"),
  Three_Letter_Abbreviation = c("Ala", "Arg", "Asn", "Asp", "Cys", "Gln", 
                                "Glu", "Gly", "His", "Ile", "Leu", "Lys", 
                                "Met", "Phe", "Pro", "Ser", "Thr", "Trp", 
                                "Tyr", "Val"),
  One_Letter_Symbol = c("A", "R", "N", "D", "C", "Q", "E", "G", "H", 
                        "I", "L", "K", "M", "F", "P", "S", "T", "W", 
                        "Y", "V"),
  Molecular_Weight = c(89, 174, 132, 133, 121, 146, 147, 75, 155, 131, 
                       131, 146, 149, 165, 115, 105, 119, 204, 181, 117)
)

print(format(amino_acids_table, justify = "centre"), row.names = FALSE)

```

```{r}
#| label: main function to calculated amino acid frequencies 
#| echo: true

calculate_amino_acid_frequencies <- function(file) {
  fasta <- read.fasta(file, seqtype = "AA")  # Leer archivo multifasta de aminoácidos

  amino_acids <- c("A", "R", "N", "D", "C", "Q", "E", "G", "H", "I", "L", "K", "M", "F", "P", "S", "T", "W", "Y", "V")

  # Procesar cada secuencia en el archivo
  results <- lapply(names(fasta), function(seq_id) {
    seq <- toupper(getSequence(fasta[[seq_id]], as.string = TRUE)[[1]])  # Convertir a texto y mayúsculas
    aa_counts <- table(factor(strsplit(seq, "")[[1]], levels = amino_acids))  # Contar aminoácidos con niveles

    total_aa <- sum(aa_counts)  # Total de aminoácidos en la secuencia

    # Crear un dataframe de frecuencias por aminoácido
    freq_df <- data.frame(AminoAcid = names(aa_counts), 
                          Frequency = as.vector(aa_counts) / total_aa)

    # Pivotar el dataframe para tener aminoácidos como columnas
    freq_wide <- freq_df %>%
      pivot_wider(names_from = AminoAcid, values_from = Frequency, 
                  values_fill = list(Frequency = 0))  # Llenar valores faltantes con 0

    # Agregar columnas con el nombre del archivo y el ID de la secuencia
    freq_wide <- freq_wide %>%
      mutate(File = basename(file), Sequence_ID = seq_id) %>%
      relocate(File, Sequence_ID)  # Asegurar el orden de las columnas

    return(freq_wide)
  })

  # Combinar resultados de todas las secuencias en un archivo
  bind_rows(results)
}

# === 1. Leer y preparar los datos de proteínas codificantes ===
combined_freqs_coding_prot <- read.delim("amino_acid_frequency_all_protein_coding.tsv", header = TRUE)
combined_freqs_coding_prot[3:22] <- lapply(combined_freqs_coding_prot[3:22], as.numeric)

combined_freqs_coding_prot$File <- gsub(".*_([A-Za-z0-9]+)_translated\\.fasta", "\\1", combined_freqs_coding_prot$File)

long_freqs_coding_prot <- combined_freqs_coding_prot %>%
  pivot_longer(cols = 3:22, names_to = "AminoAcid", values_to = "Freq") %>%
  mutate(Freq = Freq * 100)

summary_data_coding_prot <- long_freqs_coding_prot %>%
  group_by(File, AminoAcid) %>%
  summarise(mean_freq = mean(Freq), sd_freq = sd(Freq), .groups = "drop")

summary_data_coding_prot$supp <- "Other"

# === 2. Leer y preparar los datos de secuencias objetivo ===
all_frequencies_target <- read.delim("aminoacid_frequency_re_anotacion.tsv", header = TRUE)
all_frequencies_target[3:22] <- lapply(all_frequencies_target[3:22], as.numeric)

all_frequencies_target$File <- gsub(".*_([A-Za-z0-9]+)_Genome\\.fasta", "\\1", all_frequencies_target$File)

long_freqs_target <- all_frequencies_target %>%
  pivot_longer(cols = 3:22, names_to = "AminoAcid", values_to = "Freq") %>%
  mutate(Freq = Freq * 100)

summary_data_target <- long_freqs_target %>%
  group_by(File, AminoAcid) %>%
  summarise(mean_freq = mean(Freq), sd_freq = sd(Freq), .groups = "drop")

# Asumimos que key_name ya está definido previamente
summary_data_target$supp <- key_name

```


## Amino acid frequency of coding frequency

```{r}
#| label: Created function to barplot contrast 
#| echo: true

# === 3. Unir los datos de ambas fuentes ===
combined_data <- bind_rows(summary_data_target, summary_data_coding_prot)

# Etiquetas de aminoácidos
amino_acids_one_letter <- c("A", "R", "N", "D", "C", "Q", "E", "G", "H", "I", 
                            "L", "K", "M", "F", "P", "S", "T", "W", "Y", "V")
amino_acids_three_letter <- c("Ala", "Arg", "Asn", "Asp", "Cys", "Gln", "Glu", "Gly", 
                              "His", "Ile", "Leu", "Lys", "Met", "Phe", "Pro", 
                              "Ser", "Thr", "Trp", "Tyr", "Val")

combined_data$AminoAcid <- factor(
  combined_data$AminoAcid,
  levels = amino_acids_one_letter,
  labels = amino_acids_three_letter
)

# === 4. Función para graficar ===
plot_barplot_contrast <- function(data, plot_title, y_label) {
  dodge <- position_dodge(width = 0.6)
  
  ggplot(data, aes(x = AminoAcid, y = mean_freq, fill = supp)) +
    geom_bar(stat = "identity", alpha = 0.7, width = 0.5, position = dodge) +
    geom_errorbar(aes(ymin = mean_freq - sd_freq, ymax = mean_freq + sd_freq, alpha = 0.3),
                  position = dodge, width = 0.2) +
    ylab(y_label) +
    labs(title = plot_title) +
    theme_minimal() +
    theme(
      axis.line.y = element_blank(),
      axis.ticks.y = element_blank(),
      axis.text.x = element_text(angle = 45, hjust = 1)
    )
}

# === 5. Graficar por cada File ===
for (file_name in unique(summary_data_target$File)) {
  data_subset <- combined_data %>%
    filter(File == file_name)

  print(plot_barplot_contrast(
    data_subset,
    plot_title = paste("Amino acid frequency -", file_name),
    y_label = "Amino acid content (%)"
  ))
}

```

## Diferencia estadistica entre la frequencya de aminoacidos

```{r}
#| label: Statistic diff
#| echo: true

library(ggpubr)

# Prueba de normalidad (K-S)
ks.test(subset(long_freqs_coding_prot, AminoAcid == "L")$Freq, "pnorm") # rechazo H0
ks.test(subset(long_freqs_target, AminoAcid == "L")$Freq, "pnorm") # Rechazo H0

# más de ~30 muestras por grupo, el t-test es bastante robusto

av_all_prot <- long_freqs_coding_prot
av_target <- long_freqs_target
av_all_prot$supp <- "Other"
av_target$supp <- key_name

combined_long_freqs <- bind_rows(av_target, av_all_prot)

library(broom)

# Comparación por t-test para cada aminoácido
diff_aminoacids <- combined_long_freqs %>%
  group_by(AminoAcid) %>%
  filter(!is.na(Freq)) %>%
  summarise(
    t_test = list(t.test(Freq ~ supp)),
    .groups = "drop"
  ) %>%
  mutate(
    tidy_res = map(t_test, broom::tidy)
  ) %>%
  unnest(tidy_res) %>%
  select(AminoAcid, estimate1, estimate2, p.value, conf.low, conf.high)

# p < 0.05 por defecto, podés ajustar si usás FDR
sig_diff <- diff_aminoacids %>%
  filter(p.value < 0.05) %>%
  arrange(p.value)

mayores_en_target <- subset(sig_diff, estimate1 > estimate2)

# Calcular diferencia (puede ser absoluta o simple)
mayores_en_target$difference <- mayores_en_target$estimate1 - mayores_en_target$estimate2

# Ordenar por mayor diferencia
mayores_en_target_ordenado <- mayores_en_target[order(-mayores_en_target$difference), ]

# mayores_significativos <- subset(mayores_en_target_ordenado, p.value < 0.05)

# mayores_significativos

```

```{r}
#| label: table classification amino acids 
#| echo: false

library(treemap)

Category <- c(
  rep("Aliphatic", 5), rep("Aromatic", 3), 
  rep("Sulphur", 2), rep("Basic", 3), 
  rep("Acidic", 4), rep("Aliphatic Hydroxyl", 2), 
  rep("Class I tRNA Synthetase", 10), 
  rep("Class II tRNA Synthetase", 10)
)

Amino_Acid <- c(
  "Gly(G)", "Ala(A)", "Val(V)", "Leu(L)", "Ile(I)",  # Aliphatic
  "Phe(F)", "Trp(W)", "Tyr(Y)",                      # Aromatic
  "Cys(C)", "Met(M)",                                # Sulphur
  "Lys(K)", "Arg(R)", "His(H)",                      # Basic
  "Asp(D)", "Glu(E)", "Asn(N)", "Gln(Q)",            # Acidic
  "Ser(S)", "Thr(T)",                                # Aliphatic Hydroxyl
  "Glu(E)", "Gln(Q)", "Arg(R)", "Cys(C)",            # Class I
  "Met(M)", "Val(V)", "Ile(I)", "Leu(L)", 
  "Tyr(Y)", "Trp(W)",                               
  "Gly(G)", "Ala(A)", "Pro(P)", "Ser(S)",            # Class II
  "Thr(T)", "His(H)", "Asp(D)", "Asn(N)", 
  "Lys(K)", "Phe(F)"
)

# Nueva columna: Clase de tRNA (donde no aplica, dejamos NA)
tRNA_Class <- c(
  rep(NA, 19),  # No aplica para las primeras 19 categorías
  rep("Class I", 10), 
  rep("Class II", 10)
)

amino_acid_data <- data.frame(Category, Amino_Acid, tRNA_Class)

amino_acid_data$Value <- sample(1:10, nrow(amino_acid_data), replace = TRUE)

treemap(
  amino_acid_data,
  index = c("Category", "tRNA_Class", "Amino_Acid"),  # Jerarquía con tercer nivel
  vSize = "Value",  # Tamaño según los valores aleatorios
  type = "index",  # Visualización jerárquica
  palette = "Set3",  # Paleta de colores
  title = "Treemap de Aminoácidos con Clases de tRNA"
)

```

```{r}
#| label: classification amino acids 
#| echo: true

classification_aminoacids <- function(data, genome_col = "File", id_col = "Sequence_ID", type = NULL) {
  result_combained_data <- data.frame(
    "Genome" = data[[ genome_col]],
    "id" = data[[ id_col]],
    "Aliphatic" = rowSums(data[, c("G", "A", "V", "L", "I")]),
    "Aromatic" = rowSums(data[, c("F", "W", "Y")]),
    "Sulphur" = rowSums(data[, c("C", "M")]),
    "Basic" = rowSums(data[, c("K", "R", "H")]),
    "Acidic" = rowSums(data[, c("D", "E", "N", "Q")]),  # nota: N y Q a veces no se incluyen como ácidos
    "Polar_Uncharged" = rowSums(data[, c("S", "T", "N", "Q", "Y")]),  # Polar pero sin carga
    "AliphaticHydroxyl" = rowSums(data[, c("S", "T")]),
    "Positive_Charge" = rowSums(data[, c("K", "R", "H")]),  # Lisina, Arginina, Histidina
    "Negative_Charge" = rowSums(data[, c("D", "E")]),       # Aspartato, Glutamato
    # "tRNAsynthetaseClassI" = rowSums(data[, c("E", "Q", "R", "C", "M", "V", "I", "L", "Y", "W")]),
    # "tRNAsynthetaseClassII" = rowSums(data[, c("G", "A", "P", "S", "T", "H", "D", "N", "K", "F")]),
    "Hydrophobic" = rowSums(data[, c("A", "V", "I", "L", "M", "F", "W", "G", "P", "C")]),
    "Hydrophilic" = rowSums(data[, c("R", "N", "D", "Q", "E", "K", "S", "T", "Y", "H")])
  )
  return(result_combained_data)
}

classfied_amino_acids_targt <- classification_aminoacids(all_frequencies_target)
classfied_amino_acids_coding_prot <- classification_aminoacids(combined_freqs_coding_prot)

# Agregamos una columna de origen a cada conjunto
classfied_amino_acids_targt$group <- key_name
classfied_amino_acids_coding_prot$group <- "Other"

# Unimos los datasets
combined_groups <- bind_rows(classfied_amino_acids_targt, classfied_amino_acids_coding_prot)

# Seleccionamos solo las columnas numéricas de los grupos
group_columns <- c(
  "Aliphatic", "Aromatic", "Sulphur", "Basic", "Acidic", "Polar_Uncharged", "Positive_Charge", "Negative_Charge", "AliphaticHydroxyl", "Hydrophobic", "Hydrophilic"
)

# Convertimos a formato largo
long_data <- combined_groups %>%
  pivot_longer(cols = all_of(group_columns), names_to = "AminoAcidGroup", values_to = "Frequency")

summary_data <- long_data %>%
  group_by(group, AminoAcidGroup) %>%
  summarise(
    mean_freq = mean(Frequency),
    sd_freq = sd(Frequency),
    .groups = "drop"
  )

ggplot(summary_data, aes(x = AminoAcidGroup, y = mean_freq, fill = group)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.9)) +
  geom_errorbar(aes(ymin = mean_freq - sd_freq, ymax = mean_freq + sd_freq),
                position = position_dodge(width = 0.9), width = 0.3) +
  scale_fill_manual(
    values = c( "DGF-1" = "#E69F00", "Other" = "#56B4E9")  # colores distintos
  ) +
  labs(
    title = "Amino Acid Group Composition with SD",
    x = "Group",
    y = "Mean Frequency ± SD"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

library(RColorBrewer)

  group_levels <- unique(summary_data$group)
palette_colors <- setNames(brewer.pal(n = length(group_levels), name = "Set1"), group_levels)

ggplot(summary_data, aes(x = AminoAcidGroup, y = mean_freq, fill = group)) +
  geom_bar(stat = "identity", position = position_dodge(width = 0.9)) +
  geom_errorbar(aes(ymin = mean_freq - sd_freq, ymax = mean_freq + sd_freq),
                position = position_dodge(width = 0.9), width = 0.3) +
  scale_fill_manual(values = palette_colors) +
  labs(
    title = "Amino Acid Group Composition with SD",
    x = "Group",
    y = "Mean Frequency ± SD"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

